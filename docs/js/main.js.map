{"version":3,"sources":["animations.js","main.js"],"names":[],"mappingsfile":"main.js","sourcesContent":["// Hero image slider\r\nclass HeroSlider {\r\n    constructor() {\r\n        this.images = document.querySelectorAll('.hero__image');\r\n        this.currentIndex = 0;\r\n        this.intervalId = null;\r\n        \r\n        if (this.images.length > 0) {\r\n            this.init();\r\n        }\r\n    }\r\n    \r\n    init() {\r\n        this.startSlider();\r\n        this.addEventListeners();\r\n    }\r\n    \r\n    startSlider() {\r\n        this.intervalId = setInterval(() => {\r\n            this.nextSlide();\r\n        }, 4000);\r\n    }\r\n    \r\n    nextSlide() {\r\n        this.images[this.currentIndex].classList.remove('active');\r\n        this.currentIndex = (this.currentIndex + 1) % this.images.length;\r\n        this.images[this.currentIndex].classList.add('active');\r\n    }\r\n    \r\n    addEventListeners() {\r\n        // Pause on hover\r\n        const heroVisual = document.querySelector('.hero__visual');\r\n        if (heroVisual) {\r\n            heroVisual.addEventListener('mouseenter', () => {\r\n                clearInterval(this.intervalId);\r\n            });\r\n            \r\n            heroVisual.addEventListener('mouseleave', () => {\r\n                this.startSlider();\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n// Scroll animations\r\nclass ScrollAnimations {\r\n    constructor() {\r\n        this.elements = document.querySelectorAll('.animate-on-scroll');\r\n        this.observer = null;\r\n        \r\n        if (this.elements.length > 0) {\r\n            this.init();\r\n        }\r\n    }\r\n    \r\n    init() {\r\n        this.observer = new IntersectionObserver((entries) => {\r\n            entries.forEach(entry => {\r\n                if (entry.isIntersecting) {\r\n                    entry.target.classList.add('animated');\r\n                    this.observer.unobserve(entry.target);\r\n                }\r\n            });\r\n        }, {\r\n            threshold: 0.1,\r\n            rootMargin: '0px 0px -50px 0px'\r\n        });\r\n        \r\n        this.elements.forEach(element => {\r\n            this.observer.observe(element);\r\n        });\r\n    }\r\n}\r\n\r\n// Choice cards interaction\r\nclass ChoiceCards {\r\n    constructor() {\r\n        this.cards = document.querySelectorAll('.choice-card');\r\n        this.init();\r\n    }\r\n    \r\n    init() {\r\n        this.cards.forEach(card => {\r\n            card.addEventListener('click', (e) => {\r\n                const choice = card.dataset.choice;\r\n                this.handleChoice(choice, card);\r\n            });\r\n        });\r\n    }\r\n    \r\n    handleChoice(choice, cardElement) {\r\n        // Remove active class from all cards\r\n        this.cards.forEach(card => card.classList.remove('choice-card--active'));\r\n        \r\n        // Add active class to clicked card\r\n        cardElement.classList.add('choice-card--active');\r\n        \r\n        // Track choice\r\n        if (typeof trackChoiceSelection === 'function') {\r\n            trackChoiceSelection(choice);\r\n        }\r\n        \r\n        // Show personalized message\r\n        this.showPersonalizedMessage(choice);\r\n        \r\n        // Scroll to contact form after delay\r\n        setTimeout(() => {\r\n            const contactSection = document.getElementById('contacts');\r\n            if (contactSection) {\r\n                contactSection.scrollIntoView({ behavior: 'smooth' });\r\n            }\r\n        }, 2000);\r\n    }\r\n    \r\n    showPersonalizedMessage(choice) {\r\n        const messages = {\r\n            price: 'Отлично! Найдем для вас самое выгодное предложение на рынке.',\r\n            speed: 'Понятно! Организуем быструю подачу техники на ваш объект.',\r\n            quality: 'Замечательно! Подберем только проверенную технику в отличном состоянии.',\r\n            service: 'Прекрасно! Обеспечим полное сопровождение на всех этапах работы.'\r\n        };\r\n        \r\n        const message = messages[choice] || 'Спасибо за выбор! Свяжемся с вами в ближайшее время.';\r\n        \r\n        if (typeof showNotification === 'function') {\r\n            showNotification(message, 'success');\r\n        }\r\n    }\r\n}\r\n\r\n// Smooth header behavior\r\nclass SmoothHeader {\r\n    constructor() {\r\n        this.header = document.querySelector('.header');\r\n        this.lastScrollY = window.scrollY;\r\n        \r\n        if (this.header) {\r\n            this.init();\r\n        }\r\n    }\r\n    \r\n    init() {\r\n        window.addEventListener('scroll', () => {\r\n            this.handleScroll();\r\n        });\r\n    }\r\n    \r\n    handleScroll() {\r\n        const currentScrollY = window.scrollY;\r\n        \r\n        if (currentScrollY > 100) {\r\n            this.header.classList.add('header--scrolled');\r\n        } else {\r\n            this.header.classList.remove('header--scrolled');\r\n        }\r\n        \r\n        // Hide header on scroll down, show on scroll up\r\n        if (currentScrollY > this.lastScrollY && currentScrollY > 200) {\r\n            this.header.classList.add('header--hidden');\r\n        } else {\r\n            this.header.classList.remove('header--hidden');\r\n        }\r\n        \r\n        this.lastScrollY = currentScrollY;\r\n    }\r\n}\r\n\r\n// Form validation\r\nclass FormValidator {\r\n    constructor(formSelector) {\r\n        this.form = document.querySelector(formSelector);\r\n        this.errors = {};\r\n        \r\n        if (this.form) {\r\n            this.init();\r\n        }\r\n    }\r\n    \r\n    init() {\r\n        this.form.addEventListener('submit', (e) => {\r\n            e.preventDefault();\r\n            this.validateForm();\r\n        });\r\n        \r\n        // Real-time validation\r\n        const inputs = this.form.querySelectorAll('input, select, textarea');\r\n        inputs.forEach(input => {\r\n            input.addEventListener('blur', () => {\r\n                this.validateField(input);\r\n            });\r\n            \r\n            input.addEventListener('input', () => {\r\n                this.clearFieldError(input);\r\n            });\r\n        });\r\n    }\r\n    \r\n    validateForm() {\r\n        this.errors = {};\r\n        const inputs = this.form.querySelectorAll('input[required], select[required], textarea[required]');\r\n        \r\n        inputs.forEach(input => {\r\n            this.validateField(input);\r\n        });\r\n        \r\n        if (Object.keys(this.errors).length === 0) {\r\n            this.submitForm();\r\n        } else {\r\n            this.showErrors();\r\n        }\r\n    }\r\n    \r\n    validateField(field) {\r\n        const value = field.value.trim();\r\n        const name = field.name || field.id;\r\n        \r\n        // Required validation\r\n        if (field.hasAttribute('required') && !value) {\r\n            this.errors[name] = 'Это поле обязательно для заполнения';\r\n            return;\r\n        }\r\n        \r\n        // Email validation\r\n        if (field.type === 'email' && value) {\r\n            const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n            if (!emailRegex.test(value)) {\r\n                this.errors[name] = 'Введите корректный email адрес';\r\n                return;\r\n            }\r\n        }\r\n        \r\n        // Phone validation\r\n        if (field.type === 'tel' && value) {\r\n            const phoneRegex = /^\\+7\\s\\(\\d{3}\\)\\s\\d{3}-\\d{2}-\\d{2}$/;\r\n            if (!phoneRegex.test(value)) {\r\n                this.errors[name] = 'Введите корректный номер телефона';\r\n                return;\r\n            }\r\n        }\r\n        \r\n        // Remove error if validation passed\r\n        delete this.errors[name];\r\n    }\r\n    \r\n    showErrors() {\r\n        // Clear previous errors\r\n        this.form.querySelectorAll('.field-error').forEach(error => error.remove());\r\n        this.form.querySelectorAll('.error').forEach(field => field.classList.remove('error'));\r\n        \r\n        // Show new errors\r\n        Object.keys(this.errors).forEach(fieldName => {\r\n            const field = this.form.querySelector(`[name=\"${fieldName}\"], #${fieldName}`);\r\n            if (field) {\r\n                field.classList.add('error');\r\n                \r\n                const errorElement = document.createElement('div');\r\n                errorElement.className = 'field-error';\r\n                errorElement.textContent = this.errors[fieldName];\r\n                \r\n                field.parentNode.insertBefore(errorElement, field.nextSibling);\r\n            }\r\n        });\r\n        \r\n        // Focus first error field\r\n        const firstErrorField = this.form.querySelector('.error');\r\n        if (firstErrorField) {\r\n            firstErrorField.focus();\r\n        }\r\n    }\r\n    \r\n    clearFieldError(field) {\r\n        field.classList.remove('error');\r\n        const errorElement = field.parentNode.querySelector('.field-error');\r\n        if (errorElement) {\r\n            errorElement.remove();\r\n        }\r\n    }\r\n    \r\n    submitForm() {\r\n        const formData = new FormData(this.form);\r\n        const data = Object.fromEntries(formData);\r\n        \r\n        // Show loading state\r\n        const submitBtn = this.form.querySelector('button[type=\"submit\"]');\r\n        const originalText = submitBtn.textContent;\r\n        submitBtn.textContent = 'Отправляем...';\r\n        submitBtn.disabled = true;\r\n        \r\n        // Simulate form submission\r\n        setTimeout(() => {\r\n            // Reset form\r\n            this.form.reset();\r\n            \r\n            // Reset button\r\n            submitBtn.textContent = originalText;\r\n            submitBtn.disabled = false;\r\n            \r\n            // Show success message\r\n            if (typeof showNotification === 'function') {\r\n                showNotification('Заявка отправлена! Свяжемся с вами в течение 15 минут.', 'success');\r\n            }\r\n            \r\n            // Track form submission\r\n            if (typeof trackFormSubmission === 'function') {\r\n                trackFormSubmission(data);\r\n            }\r\n        }, 2000);\r\n    }\r\n}\r\n\r\n// Initialize all animations and interactions\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    new HeroSlider();\r\n    new ScrollAnimations();\r\n    new ChoiceCards();\r\n    new SmoothHeader();\r\n    new FormValidator('#contactForm');\r\n    \r\n    // Add animate-on-scroll class to elements\r\n    const elementsToAnimate = [\r\n        '.choice-card',\r\n        '.service-card',\r\n        '.advantage-card',\r\n        '.map-info',\r\n        '.contact-info'\r\n    ];\r\n    \r\n    elementsToAnimate.forEach(selector => {\r\n        const elements = document.querySelectorAll(selector);\r\n        elements.forEach(element => {\r\n            element.classList.add('animate-on-scroll');\r\n        });\r\n    });\r\n});","class SpezzApp {\r\n    constructor() {\r\n        this.currentSlide = 0;\r\n        this.slides = [];\r\n        this.isAnimating = false;\r\n        this.autoplayInterval = null;\r\n        this.autoplayDelay = 5000; // 5 секунд\r\n        \r\n        // Для карусели оборудования\r\n        this.equipmentCarousel = {\r\n            track: null,\r\n            isAnimating: false,\r\n            currentTranslate: 0,\r\n            startPos: 0,\r\n            isDragging: false,\r\n            animationId: null\r\n        };\r\n        \r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        this.initScrollAnimations();\r\n        this.initEquipmentIcons();\r\n        this.initForms();\r\n        this.initHeader();\r\n        this.initModal();\r\n        this.initHeroSlider();\r\n        this.initEquipmentCarousel();\r\n    }\r\n\r\n    initEquipmentCarousel() {\r\n        const track = document.getElementById('equipmentTrack');\r\n        if (!track) return;\r\n\r\n        this.equipmentCarousel.track = track;\r\n        \r\n        // Останавливаем CSS анимацию\r\n        const groups = track.querySelectorAll('.equipment-icons__group');\r\n        groups.forEach(group => {\r\n            group.style.animationPlayState = 'paused';\r\n        });\r\n\r\n        // Инициализируем позицию\r\n        this.equipmentCarousel.currentTranslate = 0;\r\n        this.updateCarouselPosition();\r\n\r\n        // Добавляем обработчики событий\r\n        this.addCarouselEventListeners();\r\n        \r\n        // Запускаем автопрокрутку\r\n        this.startEquipmentAutoScroll();\r\n    }\r\n\r\n    addCarouselEventListeners() {\r\n        const track = this.equipmentCarousel.track;\r\n        \r\n        // Touch события\r\n        track.addEventListener('touchstart', this.handleTouchStart.bind(this), { passive: false });\r\n        track.addEventListener('touchmove', this.handleTouchMove.bind(this), { passive: false });\r\n        track.addEventListener('touchend', this.handleTouchEnd.bind(this));\r\n\r\n        // Mouse события для десктопа\r\n        track.addEventListener('mousedown', this.handleMouseDown.bind(this));\r\n        track.addEventListener('mousemove', this.handleMouseMove.bind(this));\r\n        track.addEventListener('mouseup', this.handleMouseUp.bind(this));\r\n        track.addEventListener('mouseleave', this.handleMouseUp.bind(this));\r\n\r\n        // Предотвращаем выделение текста\r\n        track.addEventListener('selectstart', (e) => e.preventDefault());\r\n        \r\n        // Останавливаем автопрокрутку при взаимодействии\r\n        track.addEventListener('mouseenter', () => this.pauseEquipmentAutoScroll());\r\n        track.addEventListener('mouseleave', () => this.startEquipmentAutoScroll());\r\n    }\r\n\r\n    handleTouchStart(e) {\r\n        this.equipmentCarousel.isDragging = true;\r\n        this.equipmentCarousel.startPos = e.touches[0].clientX;\r\n        this.pauseEquipmentAutoScroll();\r\n        \r\n        // Останавливаем текущую анимацию\r\n        if (this.equipmentCarousel.animationId) {\r\n            cancelAnimationFrame(this.equipmentCarousel.animationId);\r\n        }\r\n    }\r\n\r\n    handleTouchMove(e) {\r\n        if (!this.equipmentCarousel.isDragging) return;\r\n        \r\n        e.preventDefault();\r\n        const currentPosition = e.touches[0].clientX;\r\n        const diff = currentPosition - this.equipmentCarousel.startPos;\r\n        \r\n        this.equipmentCarousel.currentTranslate += diff * 0.8; // Коэффициент чувствительности\r\n        this.equipmentCarousel.startPos = currentPosition;\r\n        \r\n        this.updateCarouselPosition();\r\n    }\r\n\r\n    handleTouchEnd() {\r\n        this.equipmentCarousel.isDragging = false;\r\n        this.checkCarouselBounds();\r\n        this.startEquipmentAutoScroll();\r\n    }\r\n\r\n    handleMouseDown(e) {\r\n        this.equipmentCarousel.isDragging = true;\r\n        this.equipmentCarousel.startPos = e.clientX;\r\n        this.pauseEquipmentAutoScroll();\r\n        \r\n        if (this.equipmentCarousel.animationId) {\r\n            cancelAnimationFrame(this.equipmentCarousel.animationId);\r\n        }\r\n    }\r\n\r\n    handleMouseMove(e) {\r\n        if (!this.equipmentCarousel.isDragging) return;\r\n        \r\n        e.preventDefault();\r\n        const currentPosition = e.clientX;\r\n        const diff = currentPosition - this.equipmentCarousel.startPos;\r\n        \r\n        this.equipmentCarousel.currentTranslate += diff * 0.8;\r\n        this.equipmentCarousel.startPos = currentPosition;\r\n        \r\n        this.updateCarouselPosition();\r\n    }\r\n\r\n    handleMouseUp() {\r\n        this.equipmentCarousel.isDragging = false;\r\n        this.checkCarouselBounds();\r\n        this.startEquipmentAutoScroll();\r\n    }\r\n\r\n    updateCarouselPosition() {\r\n        const track = this.equipmentCarousel.track;\r\n        if (!track) return;\r\n\r\n        track.style.transform = `translateX(${this.equipmentCarousel.currentTranslate}px)`;\r\n    }\r\n\r\n    checkCarouselBounds() {\r\n        const track = this.equipmentCarousel.track;\r\n        if (!track) return;\r\n\r\n        const firstGroup = track.querySelector('.equipment-icons__group');\r\n        if (!firstGroup) return;\r\n\r\n        const groupWidth = firstGroup.offsetWidth + 20; // 20px - это gap между группами\r\n        \r\n        // Если прокрутили слишком далеко влево (показываем вторую группу)\r\n        if (this.equipmentCarousel.currentTranslate <= -groupWidth) {\r\n            this.equipmentCarousel.currentTranslate += groupWidth;\r\n        }\r\n        \r\n        // Если прокрутили слишком далеко вправо\r\n        if (this.equipmentCarousel.currentTranslate > 0) {\r\n            this.equipmentCarousel.currentTranslate -= groupWidth;\r\n        }\r\n\r\n        // Плавно возвращаем в правильную позицию\r\n        this.animateCarouselToPosition();\r\n    }\r\n\r\n    animateCarouselToPosition() {\r\n        const track = this.equipmentCarousel.track;\r\n        if (!track) return;\r\n\r\n        const animate = () => {\r\n            track.style.transform = `translateX(${this.equipmentCarousel.currentTranslate}px)`;\r\n        };\r\n\r\n        // Используем CSS transition для плавности\r\n        track.style.transition = 'transform 0.3s ease-out';\r\n        animate();\r\n        \r\n        setTimeout(() => {\r\n            track.style.transition = '';\r\n        }, 300);\r\n    }\r\n\r\n    startEquipmentAutoScroll() {\r\n        this.pauseEquipmentAutoScroll();\r\n        \r\n        const autoScroll = () => {\r\n            if (!this.equipmentCarousel.isDragging) {\r\n                this.equipmentCarousel.currentTranslate -= 0.3; // Скорость автопрокрутки\r\n                this.updateCarouselPosition();\r\n                this.checkCarouselBounds();\r\n            }\r\n            this.equipmentCarousel.animationId = requestAnimationFrame(autoScroll);\r\n        };\r\n        \r\n        this.equipmentCarousel.animationId = requestAnimationFrame(autoScroll);\r\n    }\r\n\r\n    pauseEquipmentAutoScroll() {\r\n        if (this.equipmentCarousel.animationId) {\r\n            cancelAnimationFrame(this.equipmentCarousel.animationId);\r\n            this.equipmentCarousel.animationId = null;\r\n        }\r\n    }\r\n\r\n    initHeroSlider() {\r\n        // Данные для слайдов\r\n        this.slides = [\r\n            {\r\n                title: \"1500+ единиц техники\",\r\n                text: \"В моей базе более <strong>1500 единиц</strong> техники<br>С каждым владельцем я знаком лично.\"\r\n            },\r\n            {\r\n                title: \"Лучшие цены\",\r\n                text: \"Договорюсь по лучшей цене за вас<br>Я беру себе <strong>5-10%</strong> от стоимости заказа.\"\r\n            },\r\n            {\r\n                title: \"Для бизнеса\",\r\n                text: \"Предлагаю <strong>лучшие цены</strong> для бизнеса<br>Всю технику вы оплачиваете на один счёт.\"\r\n            },\r\n            {\r\n                title: \"Замена техники\",\r\n                text: \"Я могу <strong>подменить технику</strong> если она сломается<br>Есть собственный бульдозер и кое что еще.\"\r\n            },\r\n            {\r\n                title: \"Работа с НДС\",\r\n                text: \"Я работаю <strong>с НДС</strong> (от 10 смен)<br>Есть скидка на ГСМ и строительные материалы.\"\r\n            }\r\n        ];\r\n\r\n        this.createHeroSlider();\r\n        this.initSliderControls();\r\n        this.startAutoplay();\r\n    }\r\n\r\n    createHeroSlider() {\r\n        const heroContent = document.querySelector('.hero__content');\r\n        if (!heroContent) return;\r\n\r\n        // Создаем структуру слайдера\r\n        const sliderHTML = `\r\n            <h1 class=\"hero__title\">\r\n                Надежный диспетчер\r\n                <span class=\"hero__title-accent\">спецтехники в Крыму</span>\r\n            </h1>\r\n            \r\n            <div class=\"hero__main-container\">\r\n                <div class=\"hero__background\">\r\n                    <img src=\"images/man.png\" alt=\"Спецтехника в работе\" class=\"hero__background-image\">\r\n                </div>\r\n                \r\n                <div class=\"hero__advantages-stack\">\r\n                    ${this.slides.map((slide, index) => `\r\n                        <div class=\"hero__advantage-card ${index === 0 ? 'active' : ''}\" data-slide=\"${index}\">\r\n                            <div class=\"hero__advantage-content\">\r\n                                <h3 class=\"hero__advantage-title\">${slide.title}</h3>\r\n                                <p class=\"hero__advantage-text\">${slide.text}</p>\r\n                            </div>\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n                \r\n                <div class=\"hero__navigation\">\r\n                    <button class=\"hero__nav-btn hero__nav-btn--prev\" id=\"prevBtn\">\r\n                        <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                            <path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"/>\r\n                        </svg>\r\n                    </button>\r\n                    <button class=\"hero__nav-btn hero__nav-btn--next\" id=\"nextBtn\">\r\n                        <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n                            <path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"/>\r\n                        </svg>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            \r\n            <div class=\"hero__progress-indicators\">\r\n                ${this.slides.map((_, index) => `\r\n                    <div class=\"hero__progress-dot ${index === 0 ? 'active' : ''}\" data-slide=\"${index}\"></div>\r\n                `).join('')}\r\n            </div>\r\n            \r\n            <div class=\"hero__actions\">\r\n                <button class=\"btn btn--primary\" id=\"orderBtn\">\r\n                    Заказать технику\r\n                </button>\r\n                <button class=\"btn btn--secondary\" id=\"calculateBtn\">\r\n                    Рассчитать стоимость\r\n                </button>\r\n            </div>\r\n        `;\r\n\r\n        heroContent.innerHTML = sliderHTML;\r\n    }\r\n\r\n    initSliderControls() {\r\n        // Навигационные кнопки\r\n        const prevBtn = document.getElementById('prevBtn');\r\n        const nextBtn = document.getElementById('nextBtn');\r\n        \r\n        if (prevBtn) {\r\n            prevBtn.addEventListener('click', () => this.prevSlide());\r\n        }\r\n\r\n        if (nextBtn) {\r\n            nextBtn.addEventListener('click', () => this.nextSlide());\r\n        }\r\n\r\n        // Индикаторы прогресса\r\n        const progressDots = document.querySelectorAll('.hero__progress-dot');\r\n        progressDots.forEach((dot, index) => {\r\n            dot.addEventListener('click', () => this.goToSlide(index));\r\n        });\r\n\r\n        // Карточки (клик для перехода)\r\n        const cards = document.querySelectorAll('.hero__advantage-card');\r\n        cards.forEach((card, index) => {\r\n            card.addEventListener('click', () => {\r\n                if (index !== this.currentSlide) {\r\n                    this.goToSlide(index);\r\n                }\r\n            });\r\n        });\r\n\r\n        // Пауза автопроигрывания при наведении\r\n        const heroContainer = document.querySelector('.hero__main-container');\r\n        if (heroContainer) {\r\n            heroContainer.addEventListener('mouseenter', () => this.pauseAutoplay());\r\n            heroContainer.addEventListener('mouseleave', () => this.startAutoplay());\r\n        }\r\n\r\n        // Управление с клавиатуры\r\n        document.addEventListener('keydown', (e) => {\r\n            if (e.key === 'ArrowLeft') {\r\n                this.prevSlide();\r\n            } else if (e.key === 'ArrowRight') {\r\n                this.nextSlide();\r\n            }\r\n        });\r\n\r\n        // Touch/swipe поддержка\r\n        this.initTouchControls();\r\n    }\r\n\r\n    initTouchControls() {\r\n        const container = document.querySelector('.hero__advantages-stack');\r\n        if (!container) return;\r\n\r\n        let startX = 0;\r\n        let startY = 0;\r\n        let endX = 0;\r\n        let endY = 0;\r\n\r\n        container.addEventListener('touchstart', (e) => {\r\n            startX = e.touches[0].clientX;\r\n            startY = e.touches[0].clientY;\r\n        });\r\n\r\n        container.addEventListener('touchend', (e) => {\r\n            endX = e.changedTouches[0].clientX;\r\n            endY = e.changedTouches[0].clientY;\r\n            this.handleSwipe();\r\n        });\r\n\r\n        const handleSwipe = () => {\r\n            const deltaX = endX - startX;\r\n            const deltaY = endY - startY;\r\n            const minSwipeDistance = 50;\r\n\r\n            // Проверяем, что это горизонтальный свайп\r\n            if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > minSwipeDistance) {\r\n                if (deltaX > 0) {\r\n                    this.prevSlide();\r\n                } else {\r\n                    this.nextSlide();\r\n                }\r\n            }\r\n        };\r\n\r\n        this.handleSwipe = handleSwipe;\r\n    }\r\n\r\n    nextSlide() {\r\n        if (this.isAnimating) return;\r\n        \r\n        const nextIndex = (this.currentSlide + 1) % this.slides.length;\r\n        this.goToSlide(nextIndex);\r\n    }\r\n\r\n    prevSlide() {\r\n        if (this.isAnimating) return;\r\n        \r\n        const prevIndex = this.currentSlide === 0 ? this.slides.length - 1 : this.currentSlide - 1;\r\n        this.goToSlide(prevIndex);\r\n    }\r\n\r\n    goToSlide(index) {\r\n        if (this.isAnimating || index === this.currentSlide) return;\r\n\r\n        this.isAnimating = true;\r\n        const cards = document.querySelectorAll('.hero__advantage-card');\r\n        const dots = document.querySelectorAll('.hero__progress-dot');\r\n\r\n        // Убираем активные классы\r\n        cards.forEach(card => {\r\n            card.classList.remove('active', 'next', 'prev');\r\n        });\r\n        \r\n        dots.forEach(dot => {\r\n            dot.classList.remove('active');\r\n        });\r\n\r\n        // Устанавливаем новые классы\r\n        cards[index].classList.add('active');\r\n        dots[index].classList.add('active');\r\n\r\n        // Устанавливаем соседние карточки\r\n        const nextIndex = (index + 1) % this.slides.length;\r\n        const prevIndex = index === 0 ? this.slides.length - 1 : index - 1;\r\n\r\n        if (cards[nextIndex]) {\r\n            cards[nextIndex].classList.add('next');\r\n        }\r\n        \r\n        if (cards[prevIndex]) {\r\n            cards[prevIndex].classList.add('prev');\r\n        }\r\n\r\n        this.currentSlide = index;\r\n\r\n        // Разблокируем анимацию через время перехода\r\n        setTimeout(() => {\r\n            this.isAnimating = false;\r\n        }, 600);\r\n\r\n        // Перезапускаем автопроигрывание\r\n        this.restartAutoplay();\r\n    }\r\n\r\n    startAutoplay() {\r\n        this.pauseAutoplay(); // Очищаем предыдущий интервал\r\n        this.autoplayInterval = setInterval(() => {\r\n            this.nextSlide();\r\n        }, this.autoplayDelay);\r\n    }\r\n\r\n    pauseAutoplay() {\r\n        if (this.autoplayInterval) {\r\n            clearInterval(this.autoplayInterval);\r\n            this.autoplayInterval = null;\r\n        }\r\n    }\r\n\r\n    restartAutoplay() {\r\n        this.pauseAutoplay();\r\n        setTimeout(() => {\r\n            this.startAutoplay();\r\n        }, 1000); // Небольшая задержка после ручного переключения\r\n    }\r\n\r\n    initScrollAnimations() {\r\n        const elements = document.querySelectorAll('.animate-on-scroll');\r\n        \r\n        if (elements.length > 0) {\r\n            const observer = new IntersectionObserver((entries) => {\r\n                entries.forEach(entry => {\r\n                    if (entry.isIntersecting) {\r\n                        entry.target.classList.add('animated');\r\n                        observer.unobserve(entry.target);\r\n                    }\r\n                });\r\n            }, {\r\n                threshold: 0.1,\r\n                rootMargin: '0px 0px -50px 0px'\r\n            });\r\n            \r\n            elements.forEach(element => {\r\n                observer.observe(element);\r\n            });\r\n        }\r\n    }\r\n\r\n    initEquipmentIcons() {\r\n        // ИСПРАВЛЕНИЕ: Обрабатываем клики на ВСЕХ иконках оборудования (включая дублированные)\r\n        const equipmentIcons = document.querySelectorAll('.equipment-icon');\r\n        \r\n        equipmentIcons.forEach(icon => {\r\n            icon.addEventListener('click', (e) => {\r\n                // Предотвращаем всплытие события, чтобы не мешать drag/swipe\r\n                e.stopPropagation();\r\n                \r\n                const contactForm = document.getElementById('contactForm');\r\n                if (contactForm) {\r\n                    contactForm.scrollIntoView({ \r\n                        behavior: 'smooth',\r\n                        block: 'start'\r\n                    });\r\n                }\r\n                \r\n                const equipmentType = icon.dataset.equipment;\r\n                const selectElement = contactForm.querySelector('select[required]');\r\n                if (selectElement && equipmentType) {\r\n                    // Находим соответствующий option по значению\r\n                    const option = selectElement.querySelector(`option[value=\"${equipmentType}\"]`);\r\n                    if (option) {\r\n                        selectElement.value = equipmentType;\r\n                    } else {\r\n                        // Если точного совпадения нет, выбираем \"Другое\"\r\n                        const otherOption = selectElement.querySelector('option[value=\"other\"]');\r\n                        if (otherOption) {\r\n                            selectElement.value = 'other';\r\n                        }\r\n                    }\r\n                    \r\n                    // Добавляем небольшую задержку перед фокусом\r\n                    setTimeout(() => {\r\n                        selectElement.focus();\r\n                    }, 500);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    initForms() {\r\n        // Форма обратного звонка\r\n        const callbackForm = document.getElementById('callbackForm');\r\n        if (callbackForm) {\r\n            callbackForm.addEventListener('submit', (e) => {\r\n                e.preventDefault();\r\n                this.handleCallbackForm(callbackForm);\r\n            });\r\n        }\r\n\r\n        // Основная форма заявки\r\n        const contactForm = document.getElementById('contactForm');\r\n        if (contactForm) {\r\n            contactForm.addEventListener('submit', (e) => {\r\n                e.preventDefault();\r\n                this.handleContactForm(contactForm);\r\n            });\r\n        }\r\n\r\n        // Кнопки в hero секции\r\n        document.addEventListener('click', (e) => {\r\n            if (e.target.id === 'orderBtn') {\r\n                const contactForm = document.getElementById('contactForm');\r\n                if (contactForm) {\r\n                    contactForm.scrollIntoView({ \r\n                        behavior: 'smooth' \r\n                    });\r\n                }\r\n            }\r\n            \r\n            if (e.target.id === 'calculateBtn') {\r\n                this.showCalculatorModal();\r\n            }\r\n        });\r\n    }\r\n\r\n    initModal() {\r\n\r\n        // Создаем модальное окно для калькулятора (повторяет форму обратной связи)\r\n        const modalHTML = `\r\n            <div class=\"modal\" id=\"calculatorModal\">\r\n                <div class=\"modal__content\">\r\n                    <div class=\"modal__header\">\r\n\r\n                        <h3 class=\"modal__title\">Рассчитать стоимость</h3>\r\n                        <button class=\"modal__close\" type=\"button\">&times;</button>\r\n                    </div>\r\n                    <div class=\"modal__body\">\r\n                        <p class=\"modal__text\">\r\n                            Оставьте свой телефон и мы рассчитаем стоимость для вашего проекта.\r\n                        </p>\r\n                        <form class=\"calculator-form\" id=\"calculatorForm\">\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                            <input type=\"tel\" placeholder=\"Ваш телефон\" class=\"form-input\" required>\r\n                            <button type=\"submit\" class=\"btn btn--primary btn--full\">Рассчитать стоимость</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n        \r\n        document.body.insertAdjacentHTML('beforeend', modalHTML);\r\n        \r\n        // Обработчики для модального окна\r\n        const modal = document.getElementById('calculatorModal');\r\n        const closeBtn = modal.querySelector('.modal__close');\r\n        const form = document.getElementById('calculatorForm');\r\n        \r\n        closeBtn.addEventListener('click', () => {\r\n            this.hideModal('calculatorModal');\r\n        });\r\n        \r\n        modal.addEventListener('click', (e) => {\r\n            if (e.target === modal) {\r\n                this.hideModal('calculatorModal');\r\n            }\r\n        });\r\n        \r\n        form.addEventListener('submit', (e) => {\r\n            e.preventDefault();\r\n            this.handleCalculatorForm(form);\r\n        });\r\n        \r\n        // Закрытие по ESC\r\n        document.addEventListener('keydown', (e) => {\r\n            if (e.key === 'Escape' && modal.classList.contains('show')) {\r\n                this.hideModal('calculatorModal');\r\n            }\r\n        });\r\n    }\r\n\r\n    showCalculatorModal() {\r\n        const modal = document.getElementById('calculatorModal');\r\n        modal.classList.add('show');\r\n        document.body.style.overflow = 'hidden';\r\n        \r\n        // Пауза автопроигрывания при открытии модального окна\r\n        this.pauseAutoplay();\r\n        \r\n\r\n        // Фокус на поле телефона\r\n        setTimeout(() => {\r\n\r\n\r\n            const phoneInput = modal.querySelector('input[type=\"tel\"]');\r\n            if (phoneInput) phoneInput.focus();\r\n        }, 300);\r\n    }\r\n\r\n    hideModal(modalId) {\r\n        const modal = document.getElementById(modalId);\r\n        modal.classList.remove('show');\r\n        document.body.style.overflow = '';\r\n        \r\n        // Возобновляем автопроигрывание при закрытии модального окна\r\n        this.startAutoplay();\r\n    }\r\n\r\n    handleCallbackForm(form) {\r\n        const formData = new FormData(form);\r\n        const phone = formData.get('phone') || form.querySelector('input[type=\"tel\"]').value;\r\n        \r\n        // Показываем уведомление\r\n        this.showNotification('Спасибо! Мы перезвоним вам в течение 15 минут.', 'success');\r\n        \r\n        // Очищаем форму\r\n        form.reset();\r\n        \r\n        // Здесь можно добавить отправку данных на сервер\r\n        console.log('Callback request:', { phone });\r\n    }\r\n\r\n    handleContactForm(form) {\r\n        const formData = new FormData(form);\r\n        const data = {\r\n            name: formData.get('name') || form.querySelector('input[type=\"text\"]').value,\r\n            phone: formData.get('phone') || form.querySelector('input[type=\"tel\"]').value,\r\n            location: formData.get('location') || form.querySelectorAll('input[type=\"text\"]')[1].value,\r\n            equipment: form.querySelectorAll('select')[0].value,\r\n            date: form.querySelectorAll('select')[1].value,\r\n            volume: formData.get('volume') || form.querySelector('textarea').value\r\n        };\r\n        \r\n        // Показываем уведомление\r\n        this.showNotification('Заявка отправлена! Мы свяжемся с вами в течение 30 минут.', 'success');\r\n        \r\n        // Очищаем форму\r\n        form.reset();\r\n        \r\n        // Здесь можно добавить отправку данных на сервер\r\n        console.log('Order request:', data);\r\n    }\r\n\r\n    handleCalculatorForm(form) {\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        const phone = form.querySelector('input[type=\"tel\"]').value;\r\n        \r\n        // Скрываем модальное окно\r\n        this.hideModal('calculatorModal');\r\n        \r\n        // Показываем уведомление\r\n\r\n        this.showNotification('Спасибо! Мы рассчитаем стоимость и перезвоним в течение 30 минут.', 'success');\r\n        \r\n        // Очищаем форму\r\n        form.reset();\r\n        \r\n        // Здесь можно добавить отправку данных на сервер\r\n\r\n        console.log('Calculator request:', { phone });\r\n    }\r\n\r\n    showNotification(message, type = 'info') {\r\n        // Создаем уведомление\r\n        const notification = document.createElement('div');\r\n        notification.className = `notification notification--${type}`;\r\n        notification.innerHTML = `\r\n            <div class=\"notification__content\">\r\n                <div class=\"notification__icon\">\r\n                    ${type === 'success' ? '✅' : type === 'error' ? '❌' : 'ℹ️'}\r\n                </div>\r\n                <span class=\"notification__text\">${message}</span>\r\n                <button class=\"notification__close\">&times;</button>\r\n            </div>\r\n        `;\r\n        \r\n        document.body.appendChild(notification);\r\n        \r\n        // Показываем уведомление\r\n        setTimeout(() => {\r\n            notification.classList.add('show');\r\n        }, 100);\r\n        \r\n        // Автоматически скрываем через 5 секунд\r\n        setTimeout(() => {\r\n            this.hideNotification(notification);\r\n        }, 5000);\r\n        \r\n        // Обработчик закрытия\r\n        notification.querySelector('.notification__close').addEventListener('click', () => {\r\n            this.hideNotification(notification);\r\n        });\r\n    }\r\n\r\n    hideNotification(notification) {\r\n        notification.classList.remove('show');\r\n        setTimeout(() => {\r\n            if (notification.parentNode) {\r\n                notification.parentNode.removeChild(notification);\r\n            }\r\n        }, 300);\r\n    }\r\n\r\n    initHeader() {\r\n        const header = document.querySelector('.header');\r\n        let lastScrollY = window.scrollY;\r\n        \r\n        window.addEventListener('scroll', () => {\r\n            const currentScrollY = window.scrollY;\r\n            \r\n            // Добавляем класс при прокрутке\r\n            if (currentScrollY > 50) {\r\n                header.classList.add('header--scrolled');\r\n            } else {\r\n                header.classList.remove('header--scrolled');\r\n            }\r\n            \r\n            lastScrollY = currentScrollY;\r\n        });\r\n    }\r\n\r\n    // Метод для остановки автопроигрывания при уходе со страницы\r\n    destroy() {\r\n        this.pauseAutoplay();\r\n        this.pauseEquipmentAutoScroll();\r\n    }\r\n}\r\n\r\n// Инициализация приложения\r\nlet app;\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    app = new SpezzApp();\r\n});\r\n\r\n// Остановка автопроигрывания при уходе со страницы\r\nwindow.addEventListener('beforeunload', () => {\r\n    if (app) {\r\n        app.destroy();\r\n    }\r\n});\r\n\r\n// Пауза при потере фокуса страницы\r\ndocument.addEventListener('visibilitychange', () => {\r\n    if (app) {\r\n        if (document.hidden) {\r\n            app.pauseAutoplay();\r\n            app.pauseEquipmentAutoScroll();\r\n        } else {\r\n            app.startAutoplay();\r\n            app.startEquipmentAutoScroll();\r\n        }\r\n    }\r\n});\r\n\r\n// Дополнительные утилиты\r\nclass Utils {\r\n    static formatPhone(phone) {\r\n        // Форматирование телефона\r\n        const cleaned = phone.replace(/\\D/g, '');\r\n        const match = cleaned.match(/^(\\d{1})(\\d{3})(\\d{3})(\\d{2})(\\d{2})$/);\r\n        if (match) {\r\n            return `+${match[1]} (${match[2]}) ${match[3]}-${match[4]}-${match[5]}`;\r\n        }\r\n        return phone;\r\n    }\r\n\r\n    static validatePhone(phone) {\r\n        const phoneRegex = /^(\\+7|7|8)?[\\s\\-]?\\(?[489][0-9]{2}\\)?[\\s\\-]?[0-9]{3}[\\s\\-]?[0-9]{2}[\\s\\-]?[0-9]{2}$/;\r\n        return phoneRegex.test(phone.replace(/\\s/g, ''));\r\n    }\r\n\r\n    static validateEmail(email) {\r\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        return emailRegex.test(email);\r\n    }\r\n\r\n    static debounce(func, wait) {\r\n        let timeout;\r\n        return function executedFunction(...args) {\r\n            const later = () => {\r\n                clearTimeout(timeout);\r\n                func(...args);\r\n            };\r\n            clearTimeout(timeout);\r\n            timeout = setTimeout(later, wait);\r\n        };\r\n    }\r\n\r\n    static throttle(func, limit) {\r\n        let inThrottle;\r\n        return function() {\r\n            const args = arguments;\r\n            const context = this;\r\n            if (!inThrottle) {\r\n                func.apply(context, args);\r\n                inThrottle = true;\r\n                setTimeout(() => inThrottle = false, limit);\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\n// Автоматическое форматирование телефонных номеров\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const phoneInputs = document.querySelectorAll('input[type=\"tel\"]');\r\n    \r\n    phoneInputs.forEach(input => {\r\n        input.addEventListener('input', (e) => {\r\n            let value = e.target.value.replace(/\\D/g, '');\r\n            \r\n            if (value.startsWith('8')) {\r\n                value = '7' + value.slice(1);\r\n            }\r\n            \r\n            if (value.startsWith('7') && value.length <= 11) {\r\n                let formatted = '+7';\r\n                if (value.length > 1) {\r\n                    formatted += ' (' + value.slice(1, 4);\r\n                }\r\n                if (value.length >= 5) {\r\n                    formatted += ') ' + value.slice(4, 7);\r\n                }\r\n                if (value.length >= 8) {\r\n                    formatted += '-' + value.slice(7, 9);\r\n                }\r\n                if (value.length >= 10) {\r\n                    formatted += '-' + value.slice(9, 11);\r\n                }\r\n                e.target.value = formatted;\r\n            }\r\n        });\r\n        \r\n        input.addEventListener('keydown', (e) => {\r\n            // Разрешаем: backspace, delete, tab, escape, enter\r\n            if ([46, 8, 9, 27, 13].indexOf(e.keyCode) !== -1 ||\r\n                // Разрешаем: Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X\r\n                (e.keyCode === 65 && e.ctrlKey === true) ||\r\n                (e.keyCode === 67 && e.ctrlKey === true) ||\r\n                (e.keyCode === 86 && e.ctrlKey === true) ||\r\n                (e.keyCode === 88 && e.ctrlKey === true) ||\r\n                // Разрешаем: home, end, left, right\r\n                (e.keyCode >= 35 && e.keyCode <= 39)) {\r\n                return;\r\n            }\r\n            // Запрещаем все, кроме цифр\r\n            if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {\r\n                e.preventDefault();\r\n            }\r\n        });\r\n    });\r\n});\r\n\r\n// SEO Toggle функциональность\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    const seoToggle = document.getElementById('seoToggle');\r\n    const seoSection = document.getElementById('seoSection');\r\n    \r\n    if (seoToggle && seoSection) {\r\n        seoToggle.addEventListener('click', function() {\r\n            if (seoSection.style.display === 'none' || seoSection.style.display === '') {\r\n                seoSection.style.display = 'block';\r\n                seoSection.classList.add('show');\r\n                seoToggle.textContent = '×';\r\n                seoToggle.title = 'Скрыть дополнительную информацию';\r\n            } else {\r\n                seoSection.style.display = 'none';\r\n                seoSection.classList.remove('show');\r\n                seoToggle.textContent = '.';\r\n                seoToggle.title = 'Дополнительная информация';\r\n            }\r\n        });\r\n    }\r\n});"]}
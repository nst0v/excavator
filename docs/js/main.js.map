{"version":3,"sources":["animations.js","main.js"],"names":[],"mappingsfile":"main.js","sourcesContent":["// Hero image slider\r\nclass HeroSlider {\r\n    constructor() {\r\n        this.images = document.querySelectorAll('.hero__image');\r\n        this.currentIndex = 0;\r\n        this.intervalId = null;\r\n        \r\n        if (this.images.length > 0) {\r\n            this.init();\r\n        }\r\n    }\r\n    \r\n    init() {\r\n        this.startSlider();\r\n        this.addEventListeners();\r\n    }\r\n    \r\n    startSlider() {\r\n        this.intervalId = setInterval(() => {\r\n            this.nextSlide();\r\n        }, 4000);\r\n    }\r\n    \r\n    nextSlide() {\r\n        this.images[this.currentIndex].classList.remove('active');\r\n        this.currentIndex = (this.currentIndex + 1) % this.images.length;\r\n        this.images[this.currentIndex].classList.add('active');\r\n    }\r\n    \r\n    addEventListeners() {\r\n        // Pause on hover\r\n        const heroVisual = document.querySelector('.hero__visual');\r\n        if (heroVisual) {\r\n            heroVisual.addEventListener('mouseenter', () => {\r\n                clearInterval(this.intervalId);\r\n            });\r\n            \r\n            heroVisual.addEventListener('mouseleave', () => {\r\n                this.startSlider();\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n// Scroll animations\r\nclass ScrollAnimations {\r\n    constructor() {\r\n        this.elements = document.querySelectorAll('.animate-on-scroll');\r\n        this.observer = null;\r\n        \r\n        if (this.elements.length > 0) {\r\n            this.init();\r\n        }\r\n    }\r\n    \r\n    init() {\r\n        this.observer = new IntersectionObserver((entries) => {\r\n            entries.forEach(entry => {\r\n                if (entry.isIntersecting) {\r\n                    entry.target.classList.add('animated');\r\n                    this.observer.unobserve(entry.target);\r\n                }\r\n            });\r\n        }, {\r\n            threshold: 0.1,\r\n            rootMargin: '0px 0px -50px 0px'\r\n        });\r\n        \r\n        this.elements.forEach(element => {\r\n            this.observer.observe(element);\r\n        });\r\n    }\r\n}\r\n\r\n// Choice cards interaction\r\nclass ChoiceCards {\r\n    constructor() {\r\n        this.cards = document.querySelectorAll('.choice-card');\r\n        this.init();\r\n    }\r\n    \r\n    init() {\r\n        this.cards.forEach(card => {\r\n            card.addEventListener('click', (e) => {\r\n                const choice = card.dataset.choice;\r\n                this.handleChoice(choice, card);\r\n            });\r\n        });\r\n    }\r\n    \r\n    handleChoice(choice, cardElement) {\r\n        // Remove active class from all cards\r\n        this.cards.forEach(card => card.classList.remove('choice-card--active'));\r\n        \r\n        // Add active class to clicked card\r\n        cardElement.classList.add('choice-card--active');\r\n        \r\n        // Track choice\r\n        if (typeof trackChoiceSelection === 'function') {\r\n            trackChoiceSelection(choice);\r\n        }\r\n        \r\n        // Show personalized message\r\n        this.showPersonalizedMessage(choice);\r\n        \r\n        // Scroll to contact form after delay\r\n        setTimeout(() => {\r\n            const contactSection = document.getElementById('contacts');\r\n            if (contactSection) {\r\n                contactSection.scrollIntoView({ behavior: 'smooth' });\r\n            }\r\n        }, 2000);\r\n    }\r\n    \r\n    showPersonalizedMessage(choice) {\r\n        const messages = {\r\n            price: 'Отлично! Найдем для вас самое выгодное предложение на рынке.',\r\n            speed: 'Понятно! Организуем быструю подачу техники на ваш объект.',\r\n            quality: 'Замечательно! Подберем только проверенную технику в отличном состоянии.',\r\n            service: 'Прекрасно! Обеспечим полное сопровождение на всех этапах работы.'\r\n        };\r\n        \r\n        const message = messages[choice] || 'Спасибо за выбор! Свяжемся с вами в ближайшее время.';\r\n        \r\n        if (typeof showNotification === 'function') {\r\n            showNotification(message, 'success');\r\n        }\r\n    }\r\n}\r\n\r\n// Smooth header behavior\r\nclass SmoothHeader {\r\n    constructor() {\r\n        this.header = document.querySelector('.header');\r\n        this.lastScrollY = window.scrollY;\r\n        \r\n        if (this.header) {\r\n            this.init();\r\n        }\r\n    }\r\n    \r\n    init() {\r\n        window.addEventListener('scroll', () => {\r\n            this.handleScroll();\r\n        });\r\n    }\r\n    \r\n    handleScroll() {\r\n        const currentScrollY = window.scrollY;\r\n        \r\n        if (currentScrollY > 100) {\r\n            this.header.classList.add('header--scrolled');\r\n        } else {\r\n            this.header.classList.remove('header--scrolled');\r\n        }\r\n        \r\n        // Hide header on scroll down, show on scroll up\r\n        if (currentScrollY > this.lastScrollY && currentScrollY > 200) {\r\n            this.header.classList.add('header--hidden');\r\n        } else {\r\n            this.header.classList.remove('header--hidden');\r\n        }\r\n        \r\n        this.lastScrollY = currentScrollY;\r\n    }\r\n}\r\n\r\n// Form validation\r\nclass FormValidator {\r\n    constructor(formSelector) {\r\n        this.form = document.querySelector(formSelector);\r\n        this.errors = {};\r\n        \r\n        if (this.form) {\r\n            this.init();\r\n        }\r\n    }\r\n    \r\n    init() {\r\n        this.form.addEventListener('submit', (e) => {\r\n            e.preventDefault();\r\n            this.validateForm();\r\n        });\r\n        \r\n        // Real-time validation\r\n        const inputs = this.form.querySelectorAll('input, select, textarea');\r\n        inputs.forEach(input => {\r\n            input.addEventListener('blur', () => {\r\n                this.validateField(input);\r\n            });\r\n            \r\n            input.addEventListener('input', () => {\r\n                this.clearFieldError(input);\r\n            });\r\n        });\r\n    }\r\n    \r\n    validateForm() {\r\n        this.errors = {};\r\n        const inputs = this.form.querySelectorAll('input[required], select[required], textarea[required]');\r\n        \r\n        inputs.forEach(input => {\r\n            this.validateField(input);\r\n        });\r\n        \r\n        if (Object.keys(this.errors).length === 0) {\r\n            this.submitForm();\r\n        } else {\r\n            this.showErrors();\r\n        }\r\n    }\r\n    \r\n    validateField(field) {\r\n        const value = field.value.trim();\r\n        const name = field.name || field.id;\r\n        \r\n        // Required validation\r\n        if (field.hasAttribute('required') && !value) {\r\n            this.errors[name] = 'Это поле обязательно для заполнения';\r\n            return;\r\n        }\r\n        \r\n        // Email validation\r\n        if (field.type === 'email' && value) {\r\n            const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n            if (!emailRegex.test(value)) {\r\n                this.errors[name] = 'Введите корректный email адрес';\r\n                return;\r\n            }\r\n        }\r\n        \r\n        // Phone validation\r\n        if (field.type === 'tel' && value) {\r\n            const phoneRegex = /^\\+7\\s\\(\\d{3}\\)\\s\\d{3}-\\d{2}-\\d{2}$/;\r\n            if (!phoneRegex.test(value)) {\r\n                this.errors[name] = 'Введите корректный номер телефона';\r\n                return;\r\n            }\r\n        }\r\n        \r\n        // Remove error if validation passed\r\n        delete this.errors[name];\r\n    }\r\n    \r\n    showErrors() {\r\n        // Clear previous errors\r\n        this.form.querySelectorAll('.field-error').forEach(error => error.remove());\r\n        this.form.querySelectorAll('.error').forEach(field => field.classList.remove('error'));\r\n        \r\n        // Show new errors\r\n        Object.keys(this.errors).forEach(fieldName => {\r\n            const field = this.form.querySelector(`[name=\"${fieldName}\"], #${fieldName}`);\r\n            if (field) {\r\n                field.classList.add('error');\r\n                \r\n                const errorElement = document.createElement('div');\r\n                errorElement.className = 'field-error';\r\n                errorElement.textContent = this.errors[fieldName];\r\n                \r\n                field.parentNode.insertBefore(errorElement, field.nextSibling);\r\n            }\r\n        });\r\n        \r\n        // Focus first error field\r\n        const firstErrorField = this.form.querySelector('.error');\r\n        if (firstErrorField) {\r\n            firstErrorField.focus();\r\n        }\r\n    }\r\n    \r\n    clearFieldError(field) {\r\n        field.classList.remove('error');\r\n        const errorElement = field.parentNode.querySelector('.field-error');\r\n        if (errorElement) {\r\n            errorElement.remove();\r\n        }\r\n    }\r\n    \r\n    submitForm() {\r\n        const formData = new FormData(this.form);\r\n        const data = Object.fromEntries(formData);\r\n        \r\n        // Show loading state\r\n        const submitBtn = this.form.querySelector('button[type=\"submit\"]');\r\n        const originalText = submitBtn.textContent;\r\n        submitBtn.textContent = 'Отправляем...';\r\n        submitBtn.disabled = true;\r\n        \r\n        // Simulate form submission\r\n        setTimeout(() => {\r\n            // Reset form\r\n            this.form.reset();\r\n            \r\n            // Reset button\r\n            submitBtn.textContent = originalText;\r\n            submitBtn.disabled = false;\r\n            \r\n            // Show success message\r\n            if (typeof showNotification === 'function') {\r\n                showNotification('Заявка отправлена! Свяжемся с вами в течение 15 минут.', 'success');\r\n            }\r\n            \r\n            // Track form submission\r\n            if (typeof trackFormSubmission === 'function') {\r\n                trackFormSubmission(data);\r\n            }\r\n        }, 2000);\r\n    }\r\n}\r\n\r\n// Initialize all animations and interactions\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    new HeroSlider();\r\n    new ScrollAnimations();\r\n    new ChoiceCards();\r\n    new SmoothHeader();\r\n    new FormValidator('#contactForm');\r\n    \r\n    // Add animate-on-scroll class to elements\r\n    const elementsToAnimate = [\r\n        '.choice-card',\r\n        '.service-card',\r\n        '.advantage-card',\r\n        '.map-info',\r\n        '.contact-info'\r\n    ];\r\n    \r\n    elementsToAnimate.forEach(selector => {\r\n        const elements = document.querySelectorAll(selector);\r\n        elements.forEach(element => {\r\n            element.classList.add('animate-on-scroll');\r\n        });\r\n    });\r\n});","// Main JavaScript functionality\r\n(function() {\r\n    'use strict';\r\n\r\n    // Global variables\r\n    let isLoading = false;\r\n    let notifications = [];\r\n\r\n    // Utility functions\r\n    const utils = {\r\n        debounce: function(func, wait) {\r\n            let timeout;\r\n            return function executedFunction(...args) {\r\n                const later = () => {\r\n                    clearTimeout(timeout);\r\n                    func(...args);\r\n                };\r\n                clearTimeout(timeout);\r\n                timeout = setTimeout(later, wait);\r\n            };\r\n        },\r\n\r\n        throttle: function(func, limit) {\r\n            let inThrottle;\r\n            return function() {\r\n                const args = arguments;\r\n                const context = this;\r\n                if (!inThrottle) {\r\n                    func.apply(context, args);\r\n                    inThrottle = true;\r\n                    setTimeout(() => inThrottle = false, limit);\r\n                }\r\n            };\r\n        },\r\n\r\n        formatPhone: function(phone) {\r\n            const cleaned = phone.replace(/\\D/g, '');\r\n            if (cleaned.length === 11 && cleaned.startsWith('7')) {\r\n                return `+7 (${cleaned.slice(1, 4)}) ${cleaned.slice(4, 7)}-${cleaned.slice(7, 9)}-${cleaned.slice(9, 11)}`;\r\n            }\r\n            return phone;\r\n        },\r\n\r\n        validateEmail: function(email) {\r\n            const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n            return re.test(email);\r\n        }\r\n    };\r\n\r\n    // Notification system\r\n    const NotificationManager = {\r\n        create: function(message, type = 'info', duration = 5000) {\r\n            const notification = document.createElement('div');\r\n            notification.className = `notification notification--${type}`;\r\n            \r\n            const icons = {\r\n                success: '✅',\r\n                error: '❌',\r\n                warning: '⚠️',\r\n                info: 'ℹ️'\r\n            };\r\n            \r\n            notification.innerHTML = `\r\n                <div class=\"notification__content\">\r\n                    <span class=\"notification__icon\">${icons[type] || icons.info}</span>\r\n                    <span class=\"notification__text\">${message}</span>\r\n                    <button class=\"notification__close\" type=\"button\">×</button>\r\n                </div>\r\n            `;\r\n            \r\n            document.body.appendChild(notification);\r\n            \r\n            // Show notification\r\n            setTimeout(() => notification.classList.add('show'), 100);\r\n            \r\n            // Auto hide\r\n            const autoHide = setTimeout(() => {\r\n                this.remove(notification);\r\n            }, duration);\r\n            \r\n            // Manual close\r\n            const closeBtn = notification.querySelector('.notification__close');\r\n            closeBtn.addEventListener('click', () => {\r\n                clearTimeout(autoHide);\r\n                this.remove(notification);\r\n            });\r\n            \r\n            notifications.push(notification);\r\n            return notification;\r\n        },\r\n        \r\n        remove: function(notification) {\r\n            notification.classList.remove('show');\r\n            setTimeout(() => {\r\n                if (notification.parentNode) {\r\n                    notification.parentNode.removeChild(notification);\r\n                }\r\n                const index = notifications.indexOf(notification);\r\n                if (index > -1) {\r\n                    notifications.splice(index, 1);\r\n                }\r\n            }, 300);\r\n        },\r\n        \r\n        clear: function() {\r\n            notifications.forEach(notification => this.remove(notification));\r\n        }\r\n    };\r\n\r\n    // Modal system\r\n    const ModalManager = {\r\n        current: null,\r\n        \r\n        open: function(content, options = {}) {\r\n            this.close(); // Close any existing modal\r\n            \r\n            const modal = document.createElement('div');\r\n            modal.className = 'modal';\r\n            \r\n            modal.innerHTML = `\r\n                <div class=\"modal__content\">\r\n                    <div class=\"modal__header\">\r\n                        <h3 class=\"modal__title\">${options.title || 'Модальное окно'}</h3>\r\n                        <button class=\"modal__close\" type=\"button\">×</button>\r\n                    </div>\r\n                    <div class=\"modal__body\">\r\n                        ${content}\r\n                    </div>\r\n                </div>\r\n            `;\r\n            \r\n            document.body.appendChild(modal);\r\n            document.body.style.overflow = 'hidden';\r\n            \r\n            // Show modal\r\n            setTimeout(() => modal.classList.add('show'), 100);\r\n            \r\n            // Close handlers\r\n            const closeBtn = modal.querySelector('.modal__close');\r\n            closeBtn.addEventListener('click', () => this.close());\r\n            \r\n            modal.addEventListener('click', (e) => {\r\n                if (e.target === modal) {\r\n                    this.close();\r\n                }\r\n            });\r\n            \r\n            // ESC key handler\r\n            const escHandler = (e) => {\r\n                if (e.key === 'Escape') {\r\n                    this.close();\r\n                    document.removeEventListener('keydown', escHandler);\r\n                }\r\n            };\r\n            document.addEventListener('keydown', escHandler);\r\n            \r\n            this.current = modal;\r\n            return modal;\r\n        },\r\n        \r\n        close: function() {\r\n            if (this.current) {\r\n                this.current.classList.remove('show');\r\n                setTimeout(() => {\r\n                    if (this.current && this.current.parentNode) {\r\n                        this.current.parentNode.removeChild(this.current);\r\n                    }\r\n                    document.body.style.overflow = '';\r\n                    this.current = null;\r\n                }, 300);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Calculator functionality\r\n    const Calculator = {\r\n        rates: {\r\n            excavator: { base: 2500, hourly: 1200 },\r\n            truck: { base: 2000, hourly: 800 },\r\n            crane: { base: 4000, hourly: 2000 },\r\n            other: { base: 3000, hourly: 1500 }\r\n        },\r\n        \r\n        calculate: function(type, hours, distance = 0) {\r\n            const rate = this.rates[type] || this.rates.other;\r\n            const basePrice = rate.base;\r\n            const workPrice = rate.hourly * hours;\r\n            const deliveryPrice = distance * 50; // 50 руб за км\r\n            \r\n            return {\r\n                base: basePrice,\r\n                work: workPrice,\r\n                delivery: deliveryPrice,\r\n                total: basePrice + workPrice + deliveryPrice\r\n            };\r\n        },\r\n        \r\n        showCalculator: function() {\r\n            const content = `\r\n                <form class=\"calculator__form\" id=\"calculatorForm\">\r\n                    <h3 class=\"calculator__title\">Калькулятор стоимости</h3>\r\n                    \r\n                    <div class=\"calculator__row\">\r\n                        <select name=\"type\" class=\"form-select\" required>\r\n                            <option value=\"\">Выберите тип техники</option>\r\n                            <option value=\"excavator\">Экскаватор</option>\r\n                            <option value=\"truck\">Самосвал</option>\r\n                            <option value=\"crane\">Кран</option>\r\n                            <option value=\"other\">Другое</option>\r\n                        </select>\r\n                        \r\n                        <input type=\"number\" name=\"hours\" class=\"form-input\" placeholder=\"Количество часов\" min=\"1\" required>\r\n                    </div>\r\n                    \r\n                    <div class=\"calculator__row\">\r\n                        <input type=\"number\" name=\"distance\" class=\"form-input\" placeholder=\"Расстояние доставки (км)\" min=\"0\" value=\"0\">\r\n                        \r\n                        <input type=\"date\" name=\"date\" class=\"form-input\" required>\r\n                    </div>\r\n                    \r\n                    <button type=\"submit\" class=\"btn btn--primary btn--full\">Рассчитать стоимость</button>\r\n                    \r\n                    <div class=\"calculator__result\" id=\"calculatorResult\" style=\"display: none;\">\r\n                        <div class=\"calculator__result-title\">Предварительная стоимость:</div>\r\n                        <div class=\"calculator__result-price\" id=\"totalPrice\">0 ₽</div>\r\n                        <div class=\"calculator__result-note\">\r\n                            * Окончательная стоимость может отличаться в зависимости от условий работы\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            `;\r\n            \r\n            const modal = ModalManager.open(content, { title: 'Калькулятор стоимости аренды' });\r\n            \r\n            const form = modal.querySelector('#calculatorForm');\r\n            const result = modal.querySelector('#calculatorResult');\r\n            const totalPrice = modal.querySelector('#totalPrice');\r\n            \r\n            form.addEventListener('submit', (e) => {\r\n                e.preventDefault();\r\n                \r\n                const formData = new FormData(form);\r\n                const type = formData.get('type');\r\n                const hours = parseInt(formData.get('hours'));\r\n                const distance = parseInt(formData.get('distance')) || 0;\r\n                \r\n                const calculation = this.calculate(type, hours, distance);\r\n                \r\n                totalPrice.textContent = `${calculation.total.toLocaleString()} ₽`;\r\n                result.style.display = 'block';\r\n                \r\n                // Track calculation\r\n                if (typeof trackCalculation === 'function') {\r\n                    trackCalculation({ type, hours, distance, total: calculation.total });\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    // Phone formatting\r\n    const PhoneFormatter = {\r\n        init: function() {\r\n            const phoneInputs = document.querySelectorAll('input[type=\"tel\"]');\r\n            phoneInputs.forEach(input => {\r\n                input.addEventListener('input', this.formatInput.bind(this));\r\n                input.addEventListener('keydown', this.handleKeydown.bind(this));\r\n            });\r\n        },\r\n        \r\n        formatInput: function(e) {\r\n            const input = e.target;\r\n            let value = input.value.replace(/\\D/g, '');\r\n            \r\n            if (value.startsWith('8')) {\r\n                value = '7' + value.slice(1);\r\n            }\r\n            \r\n            if (value.startsWith('7') && value.length <= 11) {\r\n                let formatted = '+7';\r\n                if (value.length > 1) {\r\n                    formatted += ' (' + value.slice(1, 4);\r\n                }\r\n                if (value.length >= 5) {\r\n                    formatted += ') ' + value.slice(4, 7);\r\n                }\r\n                if (value.length >= 8) {\r\n                    formatted += '-' + value.slice(7, 9);\r\n                }\r\n                if (value.length >= 10) {\r\n                    formatted += '-' + value.slice(9, 11);\r\n                }\r\n                input.value = formatted;\r\n            }\r\n        },\r\n        \r\n        handleKeydown: function(e) {\r\n            // Allow backspace, delete, tab, escape, enter\r\n            if ([8, 9, 27, 13, 46].indexOf(e.keyCode) !== -1 ||\r\n                // Allow Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X\r\n                (e.keyCode === 65 && e.ctrlKey === true) ||\r\n                (e.keyCode === 67 && e.ctrlKey === true) ||\r\n                (e.keyCode === 86 && e.ctrlKey === true) ||\r\n                (e.keyCode === 88 && e.ctrlKey === true)) {\r\n                return;\r\n            }\r\n            // Ensure that it is a number and stop the keypress\r\n            if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {\r\n                e.preventDefault();\r\n            }\r\n        }\r\n    };\r\n\r\n    // Smooth scrolling for anchor links\r\n    const SmoothScroll = {\r\n        init: function() {\r\n            const links = document.querySelectorAll('a[href^=\"#\"]');\r\n            links.forEach(link => {\r\n                link.addEventListener('click', this.handleClick.bind(this));\r\n            });\r\n        },\r\n        \r\n        handleClick: function(e) {\r\n            e.preventDefault();\r\n            const href = e.currentTarget.getAttribute('href');\r\n            const target = document.querySelector(href);\r\n            \r\n            if (target) {\r\n                const headerHeight = document.querySelector('.header').offsetHeight;\r\n                const targetPosition = target.offsetTop - headerHeight - 20;\r\n                \r\n                window.scrollTo({\r\n                    top: targetPosition,\r\n                    behavior: 'smooth'\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    // Back to top button\r\n    const BackToTop = {\r\n        button: null,\r\n        \r\n        init: function() {\r\n            this.createButton();\r\n            this.addEventListeners();\r\n        },\r\n        \r\n        createButton: function() {\r\n            this.button = document.createElement('button');\r\n            this.button.className = 'back-to-top';\r\n            this.button.innerHTML = '↑';\r\n            this.button.setAttribute('aria-label', 'Наверх');\r\n            document.body.appendChild(this.button);\r\n        },\r\n        \r\n        addEventListeners: function() {\r\n            window.addEventListener('scroll', utils.throttle(() => {\r\n                if (window.pageYOffset > 300) {\r\n                    this.button.classList.add('show');\r\n                } else {\r\n                    this.button.classList.remove('show');\r\n                }\r\n            }, 100));\r\n            \r\n            this.button.addEventListener('click', () => {\r\n                window.scrollTo({\r\n                    top: 0,\r\n                    behavior: 'smooth'\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    // FAQ functionality\r\n    const FAQ = {\r\n        init: function() {\r\n            const faqItems = document.querySelectorAll('.faq__item');\r\n            faqItems.forEach(item => {\r\n                const question = item.querySelector('.faq__question');\r\n                question.addEventListener('click', () => {\r\n                    const isActive = item.classList.contains('active');\r\n                    \r\n                    // Close all items\r\n                    faqItems.forEach(otherItem => {\r\n                        otherItem.classList.remove('active');\r\n                    });\r\n                    \r\n                    // Open clicked item if it wasn't active\r\n                    if (!isActive) {\r\n                        item.classList.add('active');\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    // Global functions for external use\r\n    window.showNotification = function(message, type, duration) {\r\n        return NotificationManager.create(message, type, duration);\r\n    };\r\n\r\n    window.showModal = function(content, options) {\r\n        return ModalManager.open(content, options);\r\n    };\r\n\r\n    window.showCalculator = function() {\r\n        Calculator.showCalculator();\r\n    };\r\n\r\n    window.trackChoiceSelection = function(choice) {\r\n        console.log('Choice selected:', choice);\r\n        // Here you can add analytics tracking\r\n    };\r\n\r\n    window.trackFormSubmission = function(data) {\r\n        console.log('Form submitted:', data);\r\n        // Here you can add analytics tracking\r\n    };\r\n\r\n    window.trackCalculation = function(data) {\r\n        console.log('Calculation performed:', data);\r\n        // Here you can add analytics tracking\r\n    };\r\n\r\n    // Initialize everything when DOM is loaded\r\n    document.addEventListener('DOMContentLoaded', function() {\r\n        // Initialize core functionality\r\n        PhoneFormatter.init();\r\n        SmoothScroll.init();\r\n        BackToTop.init();\r\n        FAQ.init();\r\n        \r\n        // Button event handlers\r\n        const orderBtn = document.getElementById('orderBtn');\r\n        const calculateBtn = document.getElementById('calculateBtn');\r\n        \r\n        if (orderBtn) {\r\n            orderBtn.addEventListener('click', () => {\r\n                const contactSection = document.getElementById('contacts');\r\n                if (contactSection) {\r\n                    contactSection.scrollIntoView({ behavior: 'smooth' });\r\n                }\r\n            });\r\n        }\r\n        \r\n        if (calculateBtn) {\r\n            calculateBtn.addEventListener('click', () => {\r\n                Calculator.showCalculator();\r\n            });\r\n        }\r\n        \r\n        // Add loading states to forms\r\n        const forms = document.querySelectorAll('form');\r\n        forms.forEach(form => {\r\n            form.addEventListener('submit', function(e) {\r\n                const submitBtn = form.querySelector('button[type=\"submit\"]');\r\n                if (submitBtn && !submitBtn.disabled) {\r\n                    submitBtn.classList.add('loading');\r\n                    submitBtn.disabled = true;\r\n                    \r\n                    // Remove loading state after form processing\r\n                    setTimeout(() => {\r\n                        submitBtn.classList.remove('loading');\r\n                        submitBtn.disabled = false;\r\n                    }, 2000);\r\n                }\r\n            });\r\n        });\r\n        \r\n        // Initialize lazy loading for images\r\n        if ('IntersectionObserver' in window) {\r\n            const imageObserver = new IntersectionObserver((entries, observer) => {\r\n                entries.forEach(entry => {\r\n                    if (entry.isIntersecting) {\r\n                        const img = entry.target;\r\n                        if (img.dataset.src) {\r\n                            img.src = img.dataset.src;\r\n                            img.classList.remove('lazy');\r\n                            observer.unobserve(img);\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n            \r\n            const lazyImages = document.querySelectorAll('img[data-src]');\r\n            lazyImages.forEach(img => imageObserver.observe(img));\r\n        }\r\n        \r\n        // Performance optimization: preload critical resources\r\n        const preloadLinks = [\r\n            { href: '/dist/css/main.css', as: 'style' },\r\n            { href: 'https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap', as: 'style' }\r\n        ];\r\n        \r\n        preloadLinks.forEach(link => {\r\n            const linkElement = document.createElement('link');\r\n            linkElement.rel = 'preload';\r\n            linkElement.href = link.href;\r\n            linkElement.as = link.as;\r\n            document.head.appendChild(linkElement);\r\n        });\r\n        \r\n        // Add error handling for images\r\n        const images = document.querySelectorAll('img');\r\n        images.forEach(img => {\r\n            img.addEventListener('error', function() {\r\n                this.src = 'data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 400 300\"><rect fill=\"%23f0f0f0\" width=\"400\" height=\"300\"/><text x=\"200\" y=\"150\" text-anchor=\"middle\" fill=\"%23999\" font-size=\"16\" font-family=\"Arial\">Изображение недоступно</text></svg>';\r\n            });\r\n        });\r\n        \r\n        // Initialize service worker for offline functionality\r\n        if ('serviceWorker' in navigator) {\r\n            window.addEventListener('load', () => {\r\n                navigator.serviceWorker.register('/sw.js')\r\n                    .then(registration => {\r\n                        console.log('SW registered: ', registration);\r\n                    })\r\n                    .catch(registrationError => {\r\n                        console.log('SW registration failed: ', registrationError);\r\n                    });\r\n            });\r\n        }\r\n        \r\n        // Add keyboard navigation support\r\n        document.addEventListener('keydown', function(e) {\r\n            // ESC key closes modals\r\n            if (e.key === 'Escape') {\r\n                ModalManager.close();\r\n            }\r\n            \r\n            // Enter key on choice cards\r\n            if (e.key === 'Enter' && e.target.classList.contains('choice-card')) {\r\n                e.target.click();\r\n            }\r\n        });\r\n        \r\n        // Add focus management for accessibility\r\n        const focusableElements = 'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])';\r\n        \r\n        document.addEventListener('keydown', function(e) {\r\n            if (e.key === 'Tab') {\r\n                const modal = document.querySelector('.modal.show');\r\n                if (modal) {\r\n                    const focusableContent = modal.querySelectorAll(focusableElements);\r\n                    const firstFocusableElement = focusableContent[0];\r\n                    const lastFocusableElement = focusableContent[focusableContent.length - 1];\r\n                    \r\n                    if (e.shiftKey) {\r\n                        if (document.activeElement === firstFocusableElement) {\r\n                            lastFocusableElement.focus();\r\n                            e.preventDefault();\r\n                        }\r\n                    } else {\r\n                        if (document.activeElement === lastFocusableElement) {\r\n                            firstFocusableElement.focus();\r\n                            e.preventDefault();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    });\r\n\r\n    // Handle page visibility changes\r\n    document.addEventListener('visibilitychange', function() {\r\n        if (document.hidden) {\r\n            // Page is hidden, pause animations\r\n            document.body.classList.add('page-hidden');\r\n        } else {\r\n            // Page is visible, resume animations\r\n            document.body.classList.remove('page-hidden');\r\n        }\r\n    });\r\n\r\n    // Handle online/offline status\r\n    window.addEventListener('online', function() {\r\n        NotificationManager.create('Соединение восстановлено', 'success', 3000);\r\n    });\r\n\r\n    window.addEventListener('offline', function() {\r\n        NotificationManager.create('Нет соединения с интернетом', 'warning', 5000);\r\n    });\r\n\r\n})();"]}
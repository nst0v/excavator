{"version":3,"sources":["animations.js","main.js"],"names":[],"mappingsfile":"main.js","sourcesContent":["// Hero image slider\r\nclass HeroSlider {\r\n    constructor() {\r\n        this.images = document.querySelectorAll('.hero__image');\r\n        this.currentIndex = 0;\r\n        this.intervalId = null;\r\n        \r\n        if (this.images.length > 0) {\r\n            this.init();\r\n        }\r\n    }\r\n    \r\n    init() {\r\n        this.startSlider();\r\n        this.addEventListeners();\r\n    }\r\n    \r\n    startSlider() {\r\n        this.intervalId = setInterval(() => {\r\n            this.nextSlide();\r\n        }, 4000);\r\n    }\r\n    \r\n    nextSlide() {\r\n        this.images[this.currentIndex].classList.remove('active');\r\n        this.currentIndex = (this.currentIndex + 1) % this.images.length;\r\n        this.images[this.currentIndex].classList.add('active');\r\n    }\r\n    \r\n    addEventListeners() {\r\n        // Pause on hover\r\n        const heroVisual = document.querySelector('.hero__visual');\r\n        if (heroVisual) {\r\n            heroVisual.addEventListener('mouseenter', () => {\r\n                clearInterval(this.intervalId);\r\n            });\r\n            \r\n            heroVisual.addEventListener('mouseleave', () => {\r\n                this.startSlider();\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n// Scroll animations\r\nclass ScrollAnimations {\r\n    constructor() {\r\n        this.elements = document.querySelectorAll('.animate-on-scroll');\r\n        this.observer = null;\r\n        \r\n        if (this.elements.length > 0) {\r\n            this.init();\r\n        }\r\n    }\r\n    \r\n    init() {\r\n        this.observer = new IntersectionObserver((entries) => {\r\n            entries.forEach(entry => {\r\n                if (entry.isIntersecting) {\r\n                    entry.target.classList.add('animated');\r\n                    this.observer.unobserve(entry.target);\r\n                }\r\n            });\r\n        }, {\r\n            threshold: 0.1,\r\n            rootMargin: '0px 0px -50px 0px'\r\n        });\r\n        \r\n        this.elements.forEach(element => {\r\n            this.observer.observe(element);\r\n        });\r\n    }\r\n}\r\n\r\n// Choice cards interaction\r\nclass ChoiceCards {\r\n    constructor() {\r\n        this.cards = document.querySelectorAll('.choice-card');\r\n        this.init();\r\n    }\r\n    \r\n    init() {\r\n        this.cards.forEach(card => {\r\n            card.addEventListener('click', (e) => {\r\n                const choice = card.dataset.choice;\r\n                this.handleChoice(choice, card);\r\n            });\r\n        });\r\n    }\r\n    \r\n    handleChoice(choice, cardElement) {\r\n        // Remove active class from all cards\r\n        this.cards.forEach(card => card.classList.remove('choice-card--active'));\r\n        \r\n        // Add active class to clicked card\r\n        cardElement.classList.add('choice-card--active');\r\n        \r\n        // Track choice\r\n        if (typeof trackChoiceSelection === 'function') {\r\n            trackChoiceSelection(choice);\r\n        }\r\n        \r\n        // Show personalized message\r\n        this.showPersonalizedMessage(choice);\r\n        \r\n        // Scroll to contact form after delay\r\n        setTimeout(() => {\r\n            const contactSection = document.getElementById('contacts');\r\n            if (contactSection) {\r\n                contactSection.scrollIntoView({ behavior: 'smooth' });\r\n            }\r\n        }, 2000);\r\n    }\r\n    \r\n    showPersonalizedMessage(choice) {\r\n        const messages = {\r\n            price: 'Отлично! Найдем для вас самое выгодное предложение на рынке.',\r\n            speed: 'Понятно! Организуем быструю подачу техники на ваш объект.',\r\n            quality: 'Замечательно! Подберем только проверенную технику в отличном состоянии.',\r\n            service: 'Прекрасно! Обеспечим полное сопровождение на всех этапах работы.'\r\n        };\r\n        \r\n        const message = messages[choice] || 'Спасибо за выбор! Свяжемся с вами в ближайшее время.';\r\n        \r\n        if (typeof showNotification === 'function') {\r\n            showNotification(message, 'success');\r\n        }\r\n    }\r\n}\r\n\r\n// Smooth header behavior\r\nclass SmoothHeader {\r\n    constructor() {\r\n        this.header = document.querySelector('.header');\r\n        this.lastScrollY = window.scrollY;\r\n        \r\n        if (this.header) {\r\n            this.init();\r\n        }\r\n    }\r\n    \r\n    init() {\r\n        window.addEventListener('scroll', () => {\r\n            this.handleScroll();\r\n        });\r\n    }\r\n    \r\n    handleScroll() {\r\n        const currentScrollY = window.scrollY;\r\n        \r\n        if (currentScrollY > 100) {\r\n            this.header.classList.add('header--scrolled');\r\n        } else {\r\n            this.header.classList.remove('header--scrolled');\r\n        }\r\n        \r\n        // Hide header on scroll down, show on scroll up\r\n        if (currentScrollY > this.lastScrollY && currentScrollY > 200) {\r\n            this.header.classList.add('header--hidden');\r\n        } else {\r\n            this.header.classList.remove('header--hidden');\r\n        }\r\n        \r\n        this.lastScrollY = currentScrollY;\r\n    }\r\n}\r\n\r\n// Form validation\r\nclass FormValidator {\r\n    constructor(formSelector) {\r\n        this.form = document.querySelector(formSelector);\r\n        this.errors = {};\r\n        \r\n        if (this.form) {\r\n            this.init();\r\n        }\r\n    }\r\n    \r\n    init() {\r\n        this.form.addEventListener('submit', (e) => {\r\n            e.preventDefault();\r\n            this.validateForm();\r\n        });\r\n        \r\n        // Real-time validation\r\n        const inputs = this.form.querySelectorAll('input, select, textarea');\r\n        inputs.forEach(input => {\r\n            input.addEventListener('blur', () => {\r\n                this.validateField(input);\r\n            });\r\n            \r\n            input.addEventListener('input', () => {\r\n                this.clearFieldError(input);\r\n            });\r\n        });\r\n    }\r\n    \r\n    validateForm() {\r\n        this.errors = {};\r\n        const inputs = this.form.querySelectorAll('input[required], select[required], textarea[required]');\r\n        \r\n        inputs.forEach(input => {\r\n            this.validateField(input);\r\n        });\r\n        \r\n        if (Object.keys(this.errors).length === 0) {\r\n            this.submitForm();\r\n        } else {\r\n            this.showErrors();\r\n        }\r\n    }\r\n    \r\n    validateField(field) {\r\n        const value = field.value.trim();\r\n        const name = field.name || field.id;\r\n        \r\n        // Required validation\r\n        if (field.hasAttribute('required') && !value) {\r\n            this.errors[name] = 'Это поле обязательно для заполнения';\r\n            return;\r\n        }\r\n        \r\n        // Email validation\r\n        if (field.type === 'email' && value) {\r\n            const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n            if (!emailRegex.test(value)) {\r\n                this.errors[name] = 'Введите корректный email адрес';\r\n                return;\r\n            }\r\n        }\r\n        \r\n        // Phone validation\r\n        if (field.type === 'tel' && value) {\r\n            const phoneRegex = /^\\+7\\s\\(\\d{3}\\)\\s\\d{3}-\\d{2}-\\d{2}$/;\r\n            if (!phoneRegex.test(value)) {\r\n                this.errors[name] = 'Введите корректный номер телефона';\r\n                return;\r\n            }\r\n        }\r\n        \r\n        // Remove error if validation passed\r\n        delete this.errors[name];\r\n    }\r\n    \r\n    showErrors() {\r\n        // Clear previous errors\r\n        this.form.querySelectorAll('.field-error').forEach(error => error.remove());\r\n        this.form.querySelectorAll('.error').forEach(field => field.classList.remove('error'));\r\n        \r\n        // Show new errors\r\n        Object.keys(this.errors).forEach(fieldName => {\r\n            const field = this.form.querySelector(`[name=\"${fieldName}\"], #${fieldName}`);\r\n            if (field) {\r\n                field.classList.add('error');\r\n                \r\n                const errorElement = document.createElement('div');\r\n                errorElement.className = 'field-error';\r\n                errorElement.textContent = this.errors[fieldName];\r\n                \r\n                field.parentNode.insertBefore(errorElement, field.nextSibling);\r\n            }\r\n        });\r\n        \r\n        // Focus first error field\r\n        const firstErrorField = this.form.querySelector('.error');\r\n        if (firstErrorField) {\r\n            firstErrorField.focus();\r\n        }\r\n    }\r\n    \r\n    clearFieldError(field) {\r\n        field.classList.remove('error');\r\n        const errorElement = field.parentNode.querySelector('.field-error');\r\n        if (errorElement) {\r\n            errorElement.remove();\r\n        }\r\n    }\r\n    \r\n    submitForm() {\r\n        const formData = new FormData(this.form);\r\n        const data = Object.fromEntries(formData);\r\n        \r\n        // Show loading state\r\n        const submitBtn = this.form.querySelector('button[type=\"submit\"]');\r\n        const originalText = submitBtn.textContent;\r\n        submitBtn.textContent = 'Отправляем...';\r\n        submitBtn.disabled = true;\r\n        \r\n        // Simulate form submission\r\n        setTimeout(() => {\r\n            // Reset form\r\n            this.form.reset();\r\n            \r\n            // Reset button\r\n            submitBtn.textContent = originalText;\r\n            submitBtn.disabled = false;\r\n            \r\n            // Show success message\r\n            if (typeof showNotification === 'function') {\r\n                showNotification('Заявка отправлена! Свяжемся с вами в течение 15 минут.', 'success');\r\n            }\r\n            \r\n            // Track form submission\r\n            if (typeof trackFormSubmission === 'function') {\r\n                trackFormSubmission(data);\r\n            }\r\n        }, 2000);\r\n    }\r\n}\r\n\r\n// Initialize all animations and interactions\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    new HeroSlider();\r\n    new ScrollAnimations();\r\n    new ChoiceCards();\r\n    new SmoothHeader();\r\n    new FormValidator('#contactForm');\r\n    \r\n    // Add animate-on-scroll class to elements\r\n    const elementsToAnimate = [\r\n        '.choice-card',\r\n        '.service-card',\r\n        '.advantage-card',\r\n        '.map-info',\r\n        '.contact-info'\r\n    ];\r\n    \r\n    elementsToAnimate.forEach(selector => {\r\n        const elements = document.querySelectorAll(selector);\r\n        elements.forEach(element => {\r\n            element.classList.add('animate-on-scroll');\r\n        });\r\n    });\r\n});","class SpezzApp {\r\n    constructor() {\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        this.initScrollAnimations();\r\n        this.initEquipmentIcons();\r\n        this.initForms();\r\n        this.initHeader();\r\n        this.initModal();\r\n    }\r\n\r\n    initScrollAnimations() {\r\n        const elements = document.querySelectorAll('.animate-on-scroll');\r\n        \r\n        if (elements.length > 0) {\r\n            const observer = new IntersectionObserver((entries) => {\r\n                entries.forEach(entry => {\r\n                    if (entry.isIntersecting) {\r\n                        entry.target.classList.add('animated');\r\n                        observer.unobserve(entry.target);\r\n                    }\r\n                });\r\n            }, {\r\n                threshold: 0.1,\r\n                rootMargin: '0px 0px -50px 0px'\r\n            });\r\n            \r\n            elements.forEach(element => {\r\n                observer.observe(element);\r\n            });\r\n        }\r\n    }\r\n\r\n    initEquipmentIcons() {\r\n        const equipmentIcons = document.querySelectorAll('.equipment-icon');\r\n        \r\n        equipmentIcons.forEach(icon => {\r\n            icon.addEventListener('click', () => {\r\n                const contactForm = document.getElementById('contactForm');\r\n                if (contactForm) {\r\n                    contactForm.scrollIntoView({ \r\n                        behavior: 'smooth',\r\n                        block: 'start'\r\n                    });\r\n                }\r\n                \r\n                const equipmentType = icon.dataset.equipment;\r\n                const selectElement = contactForm.querySelector('select[required]');\r\n                if (selectElement && equipmentType) {\r\n                    selectElement.value = equipmentType;\r\n                    selectElement.focus();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    initForms() {\r\n        // Форма обратного звонка\r\n        const callbackForm = document.getElementById('callbackForm');\r\n        if (callbackForm) {\r\n            callbackForm.addEventListener('submit', (e) => {\r\n                e.preventDefault();\r\n                this.handleCallbackForm(callbackForm);\r\n            });\r\n        }\r\n\r\n        // Основная форма заявки\r\n        const contactForm = document.getElementById('contactForm');\r\n        if (contactForm) {\r\n            contactForm.addEventListener('submit', (e) => {\r\n                e.preventDefault();\r\n                this.handleContactForm(contactForm);\r\n            });\r\n        }\r\n\r\n        // Кнопки в hero секции\r\n        const orderBtn = document.getElementById('orderBtn');\r\n        const calculateBtn = document.getElementById('calculateBtn');\r\n\r\n        if (orderBtn) {\r\n            orderBtn.addEventListener('click', () => {\r\n                document.getElementById('contactForm').scrollIntoView({ \r\n                    behavior: 'smooth' \r\n                });\r\n            });\r\n        }\r\n\r\n        if (calculateBtn) {\r\n            calculateBtn.addEventListener('click', () => {\r\n                this.showCalculatorModal();\r\n            });\r\n        }\r\n    }\r\n\r\n    initModal() {\r\n        // Создаем модальное окно для калькулятора\r\n        const modalHTML = `\r\n            <div class=\"modal\" id=\"calculatorModal\">\r\n                <div class=\"modal__content\">\r\n                    <div class=\"modal__header\">\r\n                        <h3 class=\"modal__title\">Расчет стоимости</h3>\r\n                        <button class=\"modal__close\" type=\"button\">&times;</button>\r\n                    </div>\r\n                    <div class=\"modal__body\">\r\n                        <form class=\"calculator-form\" id=\"calculatorForm\">\r\n                            <div class=\"calculator-form__row\">\r\n                                <select class=\"form-select\" required>\r\n                                    <option value=\"\">Тип техники</option>\r\n                                    <option value=\"excavator\">Экскаватор</option>\r\n                                    <option value=\"truck\">Самосвал</option>\r\n                                    <option value=\"crane\">Кран</option>\r\n                                    <option value=\"bulldozer\">Бульдозер</option>\r\n                                    <option value=\"loader\">Погрузчик</option>\r\n                                </select>\r\n                                <input type=\"number\" placeholder=\"Часов работы\" class=\"form-input\" min=\"1\" required>\r\n                            </div>\r\n                            <input type=\"text\" placeholder=\"Место работ\" class=\"form-input\" required>\r\n                            <textarea placeholder=\"Описание работ\" class=\"form-textarea\" rows=\"3\"></textarea>\r\n                            <input type=\"tel\" placeholder=\"Ваш телефон для расчета\" class=\"form-input\" required>\r\n                            <button type=\"submit\" class=\"btn btn--primary btn--full\">Получить расчет</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n        \r\n        document.body.insertAdjacentHTML('beforeend', modalHTML);\r\n        \r\n        // Обработчики для модального окна\r\n        const modal = document.getElementById('calculatorModal');\r\n        const closeBtn = modal.querySelector('.modal__close');\r\n        const form = document.getElementById('calculatorForm');\r\n        \r\n        closeBtn.addEventListener('click', () => {\r\n            this.hideModal('calculatorModal');\r\n        });\r\n        \r\n        modal.addEventListener('click', (e) => {\r\n            if (e.target === modal) {\r\n                this.hideModal('calculatorModal');\r\n            }\r\n        });\r\n        \r\n        form.addEventListener('submit', (e) => {\r\n            e.preventDefault();\r\n            this.handleCalculatorForm(form);\r\n        });\r\n        \r\n        // Закрытие по ESC\r\n        document.addEventListener('keydown', (e) => {\r\n            if (e.key === 'Escape' && modal.classList.contains('show')) {\r\n                this.hideModal('calculatorModal');\r\n            }\r\n        });\r\n    }\r\n\r\n    showCalculatorModal() {\r\n        const modal = document.getElementById('calculatorModal');\r\n        modal.classList.add('show');\r\n        document.body.style.overflow = 'hidden';\r\n        \r\n        // Фокус на первое поле\r\n        setTimeout(() => {\r\n            const firstInput = modal.querySelector('.form-select');\r\n            if (firstInput) firstInput.focus();\r\n        }, 300);\r\n    }\r\n\r\n    hideModal(modalId) {\r\n        const modal = document.getElementById(modalId);\r\n        modal.classList.remove('show');\r\n        document.body.style.overflow = '';\r\n    }\r\n\r\n    handleCallbackForm(form) {\r\n        const formData = new FormData(form);\r\n        const phone = formData.get('phone') || form.querySelector('input[type=\"tel\"]').value;\r\n        \r\n        // Показываем уведомление\r\n        this.showNotification('Спасибо! Мы перезвоним вам в течение 15 минут.', 'success');\r\n        \r\n        // Очищаем форму\r\n        form.reset();\r\n        \r\n        // Здесь можно добавить отправку данных на сервер\r\n        console.log('Callback request:', { phone });\r\n    }\r\n\r\n    handleContactForm(form) {\r\n        const formData = new FormData(form);\r\n        const data = {\r\n            name: formData.get('name') || form.querySelector('input[type=\"text\"]').value,\r\n            phone: formData.get('phone') || form.querySelector('input[type=\"tel\"]').value,\r\n            location: formData.get('location') || form.querySelectorAll('input[type=\"text\"]')[1].value,\r\n            equipment: form.querySelectorAll('select')[0].value,\r\n            date: form.querySelectorAll('select')[1].value,\r\n            volume: formData.get('volume') || form.querySelector('textarea').value\r\n        };\r\n        \r\n        // Показываем уведомление\r\n        this.showNotification('Заявка отправлена! Мы свяжемся с вами в течение 30 минут.', 'success');\r\n        \r\n        // Очищаем форму\r\n        form.reset();\r\n        \r\n        // Здесь можно добавить отправку данных на сервер\r\n        console.log('Order request:', data);\r\n    }\r\n\r\n    handleCalculatorForm(form) {\r\n        const formData = new FormData(form);\r\n        const data = {\r\n            equipment: form.querySelector('select').value,\r\n            hours: form.querySelector('input[type=\"number\"]').value,\r\n            location: form.querySelector('input[type=\"text\"]').value,\r\n            description: form.querySelector('textarea').value,\r\n            phone: form.querySelector('input[type=\"tel\"]').value\r\n        };\r\n        \r\n        // Скрываем модальное окно\r\n        this.hideModal('calculatorModal');\r\n        \r\n        // Показываем уведомление\r\n        this.showNotification('Спасибо за заявку! Мы рассчитаем стоимость и перезвоним в течение 30 минут.', 'success');\r\n        \r\n        // Очищаем форму\r\n        form.reset();\r\n        \r\n        // Здесь можно добавить отправку данных на сервер\r\n        console.log('Calculator request:', data);\r\n    }\r\n\r\n    showNotification(message, type = 'info') {\r\n        // Создаем уведомление\r\n        const notification = document.createElement('div');\r\n        notification.className = `notification notification--${type}`;\r\n        notification.innerHTML = `\r\n            <div class=\"notification__content\">\r\n                <div class=\"notification__icon\">\r\n                    ${type === 'success' ? '✅' : type === 'error' ? '❌' : 'ℹ️'}\r\n                </div>\r\n                <span class=\"notification__text\">${message}</span>\r\n                <button class=\"notification__close\">&times;</button>\r\n            </div>\r\n        `;\r\n        \r\n        document.body.appendChild(notification);\r\n        \r\n        // Показываем уведомление\r\n        setTimeout(() => {\r\n            notification.classList.add('show');\r\n        }, 100);\r\n        \r\n        // Автоматически скрываем через 5 секунд\r\n        setTimeout(() => {\r\n            this.hideNotification(notification);\r\n        }, 5000);\r\n        \r\n        // Обработчик закрытия\r\n        notification.querySelector('.notification__close').addEventListener('click', () => {\r\n            this.hideNotification(notification);\r\n        });\r\n    }\r\n\r\n    hideNotification(notification) {\r\n        notification.classList.remove('show');\r\n        setTimeout(() => {\r\n            if (notification.parentNode) {\r\n                notification.parentNode.removeChild(notification);\r\n            }\r\n        }, 300);\r\n    }\r\n\r\n    initHeader() {\r\n        const header = document.querySelector('.header');\r\n        let lastScrollY = window.scrollY;\r\n        \r\n        window.addEventListener('scroll', () => {\r\n            const currentScrollY = window.scrollY;\r\n            \r\n            // Добавляем класс при прокрутке\r\n            if (currentScrollY > 50) {\r\n                header.classList.add('header--scrolled');\r\n            } else {\r\n                header.classList.remove('header--scrolled');\r\n            }\r\n            \r\n            lastScrollY = currentScrollY;\r\n        });\r\n    }\r\n}\r\n\r\n// Инициализация приложения\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    new SpezzApp();\r\n});\r\n\r\n// Дополнительные утилиты\r\nclass Utils {\r\n    static formatPhone(phone) {\r\n        // Форматирование телефона\r\n        const cleaned = phone.replace(/\\D/g, '');\r\n        const match = cleaned.match(/^(\\d{1})(\\d{3})(\\d{3})(\\d{2})(\\d{2})$/);\r\n        if (match) {\r\n            return `+${match[1]} (${match[2]}) ${match[3]}-${match[4]}-${match[5]}`;\r\n        }\r\n        return phone;\r\n    }\r\n\r\n    static validatePhone(phone) {\r\n        const phoneRegex = /^(\\+7|7|8)?[\\s\\-]?\\(?[489][0-9]{2}\\)?[\\s\\-]?[0-9]{3}[\\s\\-]?[0-9]{2}[\\s\\-]?[0-9]{2}$/;\r\n        return phoneRegex.test(phone.replace(/\\s/g, ''));\r\n    }\r\n\r\n    static validateEmail(email) {\r\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        return emailRegex.test(email);\r\n    }\r\n\r\n    static debounce(func, wait) {\r\n        let timeout;\r\n        return function executedFunction(...args) {\r\n            const later = () => {\r\n                clearTimeout(timeout);\r\n                func(...args);\r\n            };\r\n            clearTimeout(timeout);\r\n            timeout = setTimeout(later, wait);\r\n        };\r\n    }\r\n\r\n    static throttle(func, limit) {\r\n        let inThrottle;\r\n        return function() {\r\n            const args = arguments;\r\n            const context = this;\r\n            if (!inThrottle) {\r\n                func.apply(context, args);\r\n                inThrottle = true;\r\n                setTimeout(() => inThrottle = false, limit);\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\n// Автоматическое форматирование телефонных номеров\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const phoneInputs = document.querySelectorAll('input[type=\"tel\"]');\r\n    \r\n    phoneInputs.forEach(input => {\r\n        input.addEventListener('input', (e) => {\r\n            let value = e.target.value.replace(/\\D/g, '');\r\n            \r\n            if (value.startsWith('8')) {\r\n                value = '7' + value.slice(1);\r\n            }\r\n            \r\n            if (value.startsWith('7') && value.length <= 11) {\r\n                let formatted = '+7';\r\n                if (value.length > 1) {\r\n                    formatted += ' (' + value.slice(1, 4);\r\n                }\r\n                if (value.length >= 5) {\r\n                    formatted += ') ' + value.slice(4, 7);\r\n                }\r\n                if (value.length >= 8) {\r\n                    formatted += '-' + value.slice(7, 9);\r\n                }\r\n                if (value.length >= 10) {\r\n                    formatted += '-' + value.slice(9, 11);\r\n                }\r\n                e.target.value = formatted;\r\n            }\r\n        });\r\n        \r\n        input.addEventListener('keydown', (e) => {\r\n            // Разрешаем: backspace, delete, tab, escape, enter\r\n            if ([46, 8, 9, 27, 13].indexOf(e.keyCode) !== -1 ||\r\n                // Разрешаем: Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X\r\n                (e.keyCode === 65 && e.ctrlKey === true) ||\r\n                (e.keyCode === 67 && e.ctrlKey === true) ||\r\n                (e.keyCode === 86 && e.ctrlKey === true) ||\r\n                (e.keyCode === 88 && e.ctrlKey === true) ||\r\n                // Разрешаем: home, end, left, right\r\n                (e.keyCode >= 35 && e.keyCode <= 39)) {\r\n                return;\r\n            }\r\n            // Запрещаем все, кроме цифр\r\n            if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {\r\n                e.preventDefault();\r\n            }\r\n        });\r\n    });\r\n});"]}
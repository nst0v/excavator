{"version":3,"sources":["animations.js","main.js"],"names":[],"mappingsfile":"main.js","sourcesContent":["// Hero image slider\r\nclass HeroSlider {\r\n    constructor() {\r\n        this.images = document.querySelectorAll('.hero__image');\r\n        this.currentIndex = 0;\r\n        this.intervalId = null;\r\n        \r\n        if (this.images.length > 0) {\r\n            this.init();\r\n        }\r\n    }\r\n    \r\n    init() {\r\n        this.startSlider();\r\n        this.addEventListeners();\r\n    }\r\n    \r\n    startSlider() {\r\n        this.intervalId = setInterval(() => {\r\n            this.nextSlide();\r\n        }, 4000);\r\n    }\r\n    \r\n    nextSlide() {\r\n        this.images[this.currentIndex].classList.remove('active');\r\n        this.currentIndex = (this.currentIndex + 1) % this.images.length;\r\n        this.images[this.currentIndex].classList.add('active');\r\n    }\r\n    \r\n    addEventListeners() {\r\n        // Pause on hover\r\n        const heroVisual = document.querySelector('.hero__visual');\r\n        if (heroVisual) {\r\n            heroVisual.addEventListener('mouseenter', () => {\r\n                clearInterval(this.intervalId);\r\n            });\r\n            \r\n            heroVisual.addEventListener('mouseleave', () => {\r\n                this.startSlider();\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n// Scroll animations\r\nclass ScrollAnimations {\r\n    constructor() {\r\n        this.elements = document.querySelectorAll('.animate-on-scroll');\r\n        this.observer = null;\r\n        \r\n        if (this.elements.length > 0) {\r\n            this.init();\r\n        }\r\n    }\r\n    \r\n    init() {\r\n        this.observer = new IntersectionObserver((entries) => {\r\n            entries.forEach(entry => {\r\n                if (entry.isIntersecting) {\r\n                    entry.target.classList.add('animated');\r\n                    this.observer.unobserve(entry.target);\r\n                }\r\n            });\r\n        }, {\r\n            threshold: 0.1,\r\n            rootMargin: '0px 0px -50px 0px'\r\n        });\r\n        \r\n        this.elements.forEach(element => {\r\n            this.observer.observe(element);\r\n        });\r\n    }\r\n}\r\n\r\n// Choice cards interaction\r\nclass ChoiceCards {\r\n    constructor() {\r\n        this.cards = document.querySelectorAll('.choice-card');\r\n        this.init();\r\n    }\r\n    \r\n    init() {\r\n        this.cards.forEach(card => {\r\n            card.addEventListener('click', (e) => {\r\n                const choice = card.dataset.choice;\r\n                this.handleChoice(choice, card);\r\n            });\r\n        });\r\n    }\r\n    \r\n    handleChoice(choice, cardElement) {\r\n        // Remove active class from all cards\r\n        this.cards.forEach(card => card.classList.remove('choice-card--active'));\r\n        \r\n        // Add active class to clicked card\r\n        cardElement.classList.add('choice-card--active');\r\n        \r\n        // Track choice\r\n        if (typeof trackChoiceSelection === 'function') {\r\n            trackChoiceSelection(choice);\r\n        }\r\n        \r\n        // Show personalized message\r\n        this.showPersonalizedMessage(choice);\r\n        \r\n        // Scroll to contact form after delay\r\n        setTimeout(() => {\r\n            const contactSection = document.getElementById('contacts');\r\n            if (contactSection) {\r\n                contactSection.scrollIntoView({ behavior: 'smooth' });\r\n            }\r\n        }, 2000);\r\n    }\r\n    \r\n    showPersonalizedMessage(choice) {\r\n        const messages = {\r\n            price: 'Отлично! Найдем для вас самое выгодное предложение на рынке.',\r\n            speed: 'Понятно! Организуем быструю подачу техники на ваш объект.',\r\n            quality: 'Замечательно! Подберем только проверенную технику в отличном состоянии.',\r\n            service: 'Прекрасно! Обеспечим полное сопровождение на всех этапах работы.'\r\n        };\r\n        \r\n        const message = messages[choice] || 'Спасибо за выбор! Свяжемся с вами в ближайшее время.';\r\n        \r\n        if (typeof showNotification === 'function') {\r\n            showNotification(message, 'success');\r\n        }\r\n    }\r\n}\r\n\r\n// Smooth header behavior\r\nclass SmoothHeader {\r\n    constructor() {\r\n        this.header = document.querySelector('.header');\r\n        this.lastScrollY = window.scrollY;\r\n        \r\n        if (this.header) {\r\n            this.init();\r\n        }\r\n    }\r\n    \r\n    init() {\r\n        window.addEventListener('scroll', () => {\r\n            this.handleScroll();\r\n        });\r\n    }\r\n    \r\n    handleScroll() {\r\n        const currentScrollY = window.scrollY;\r\n        \r\n        if (currentScrollY > 100) {\r\n            this.header.classList.add('header--scrolled');\r\n        } else {\r\n            this.header.classList.remove('header--scrolled');\r\n        }\r\n        \r\n        // Hide header on scroll down, show on scroll up\r\n        if (currentScrollY > this.lastScrollY && currentScrollY > 200) {\r\n            this.header.classList.add('header--hidden');\r\n        } else {\r\n            this.header.classList.remove('header--hidden');\r\n        }\r\n        \r\n        this.lastScrollY = currentScrollY;\r\n    }\r\n}\r\n\r\n// Form validation\r\nclass FormValidator {\r\n    constructor(formSelector) {\r\n        this.form = document.querySelector(formSelector);\r\n        this.errors = {};\r\n        \r\n        if (this.form) {\r\n            this.init();\r\n        }\r\n    }\r\n    \r\n    init() {\r\n        this.form.addEventListener('submit', (e) => {\r\n            e.preventDefault();\r\n            this.validateForm();\r\n        });\r\n        \r\n        // Real-time validation\r\n        const inputs = this.form.querySelectorAll('input, select, textarea');\r\n        inputs.forEach(input => {\r\n            input.addEventListener('blur', () => {\r\n                this.validateField(input);\r\n            });\r\n            \r\n            input.addEventListener('input', () => {\r\n                this.clearFieldError(input);\r\n            });\r\n        });\r\n    }\r\n    \r\n    validateForm() {\r\n        this.errors = {};\r\n        const inputs = this.form.querySelectorAll('input[required], select[required], textarea[required]');\r\n        \r\n        inputs.forEach(input => {\r\n            this.validateField(input);\r\n        });\r\n        \r\n        if (Object.keys(this.errors).length === 0) {\r\n            this.submitForm();\r\n        } else {\r\n            this.showErrors();\r\n        }\r\n    }\r\n    \r\n    validateField(field) {\r\n        const value = field.value.trim();\r\n        const name = field.name || field.id;\r\n        \r\n        // Required validation\r\n        if (field.hasAttribute('required') && !value) {\r\n            this.errors[name] = 'Это поле обязательно для заполнения';\r\n            return;\r\n        }\r\n        \r\n        // Email validation\r\n        if (field.type === 'email' && value) {\r\n            const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n            if (!emailRegex.test(value)) {\r\n                this.errors[name] = 'Введите корректный email адрес';\r\n                return;\r\n            }\r\n        }\r\n        \r\n        // Phone validation\r\n        if (field.type === 'tel' && value) {\r\n            const phoneRegex = /^\\+7\\s\\(\\d{3}\\)\\s\\d{3}-\\d{2}-\\d{2}$/;\r\n            if (!phoneRegex.test(value)) {\r\n                this.errors[name] = 'Введите корректный номер телефона';\r\n                return;\r\n            }\r\n        }\r\n        \r\n        // Remove error if validation passed\r\n        delete this.errors[name];\r\n    }\r\n    \r\n    showErrors() {\r\n        // Clear previous errors\r\n        this.form.querySelectorAll('.field-error').forEach(error => error.remove());\r\n        this.form.querySelectorAll('.error').forEach(field => field.classList.remove('error'));\r\n        \r\n        // Show new errors\r\n        Object.keys(this.errors).forEach(fieldName => {\r\n            const field = this.form.querySelector(`[name=\"${fieldName}\"], #${fieldName}`);\r\n            if (field) {\r\n                field.classList.add('error');\r\n                \r\n                const errorElement = document.createElement('div');\r\n                errorElement.className = 'field-error';\r\n                errorElement.textContent = this.errors[fieldName];\r\n                \r\n                field.parentNode.insertBefore(errorElement, field.nextSibling);\r\n            }\r\n        });\r\n        \r\n        // Focus first error field\r\n        const firstErrorField = this.form.querySelector('.error');\r\n        if (firstErrorField) {\r\n            firstErrorField.focus();\r\n        }\r\n    }\r\n    \r\n    clearFieldError(field) {\r\n        field.classList.remove('error');\r\n        const errorElement = field.parentNode.querySelector('.field-error');\r\n        if (errorElement) {\r\n            errorElement.remove();\r\n        }\r\n    }\r\n    \r\n    submitForm() {\r\n        const formData = new FormData(this.form);\r\n        const data = Object.fromEntries(formData);\r\n        \r\n        // Show loading state\r\n        const submitBtn = this.form.querySelector('button[type=\"submit\"]');\r\n        const originalText = submitBtn.textContent;\r\n        submitBtn.textContent = 'Отправляем...';\r\n        submitBtn.disabled = true;\r\n        \r\n        // Simulate form submission\r\n        setTimeout(() => {\r\n            // Reset form\r\n            this.form.reset();\r\n            \r\n            // Reset button\r\n            submitBtn.textContent = originalText;\r\n            submitBtn.disabled = false;\r\n            \r\n            // Show success message\r\n            if (typeof showNotification === 'function') {\r\n                showNotification('Заявка отправлена! Свяжемся с вами в течение 15 минут.', 'success');\r\n            }\r\n            \r\n            // Track form submission\r\n            if (typeof trackFormSubmission === 'function') {\r\n                trackFormSubmission(data);\r\n            }\r\n        }, 2000);\r\n    }\r\n}\r\n\r\n// Initialize all animations and interactions\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    new HeroSlider();\r\n    new ScrollAnimations();\r\n    new ChoiceCards();\r\n    new SmoothHeader();\r\n    new FormValidator('#contactForm');\r\n    \r\n    // Add animate-on-scroll class to elements\r\n    const elementsToAnimate = [\r\n        '.choice-card',\r\n        '.service-card',\r\n        '.advantage-card',\r\n        '.map-info',\r\n        '.contact-info'\r\n    ];\r\n    \r\n    elementsToAnimate.forEach(selector => {\r\n        const elements = document.querySelectorAll(selector);\r\n        elements.forEach(element => {\r\n            element.classList.add('animate-on-scroll');\r\n        });\r\n    });\r\n});","class SpezzApp {\r\n    constructor() {\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        this.initScrollAnimations();\r\n        this.initEquipmentCarousel(); // Добавляем карусель\r\n        this.initForms();\r\n        this.initHeader();\r\n        this.initModal();\r\n    }\r\n\r\n    initScrollAnimations() {\r\n        const elements = document.querySelectorAll('.animate-on-scroll');\r\n        \r\n        if (elements.length > 0) {\r\n            const observer = new IntersectionObserver((entries) => {\r\n                entries.forEach(entry => {\r\n                    if (entry.isIntersecting) {\r\n                        entry.target.classList.add('animated');\r\n                        observer.unobserve(entry.target);\r\n                    }\r\n                });\r\n            }, {\r\n                threshold: 0.1,\r\n                rootMargin: '0px 0px -50px 0px'\r\n            });\r\n            \r\n            elements.forEach(element => {\r\n                observer.observe(element);\r\n            });\r\n        }\r\n    }\r\n\r\n    initEquipmentCarousel() {\r\n        const track = document.getElementById('equipmentTrack');\r\n        if (!track) return;\r\n\r\n        // Сохраняем оригинальные элементы\r\n        const originalItems = Array.from(track.children);\r\n        \r\n        // Создаем один полный набор дубликатов в правильном порядке\r\n        originalItems.forEach(item => {\r\n            const clone = item.cloneNode(true);\r\n            // Убираем возможность взаимодействия с клонами\r\n            clone.style.pointerEvents = 'none';\r\n            clone.setAttribute('aria-hidden', 'true');\r\n            track.appendChild(clone);\r\n        });\r\n\r\n        // Обработка кликов только для оригинальных элементов\r\n        originalItems.forEach(item => {\r\n            item.addEventListener('click', (e) => {\r\n                e.preventDefault();\r\n                const equipmentType = item.dataset.equipment;\r\n                \r\n                // Визуальная обратная связь\r\n                item.style.transform = 'translateY(-2px) scale(0.95)';\r\n                setTimeout(() => {\r\n                    item.style.transform = '';\r\n                }, 150);\r\n                \r\n                // Прокрутка к форме\r\n                setTimeout(() => {\r\n                    const contactForm = document.getElementById('contactForm');\r\n                    if (contactForm) {\r\n                        contactForm.scrollIntoView({ \r\n                            behavior: 'smooth',\r\n                            block: 'start'\r\n                        });\r\n                        \r\n                        // Заполнение формы\r\n                        setTimeout(() => {\r\n                            const selectElement = contactForm.querySelector('select[required]');\r\n                            if (selectElement && equipmentType) {\r\n                                const option = selectElement.querySelector(`option[value=\"${equipmentType}\"]`);\r\n                                if (option) {\r\n                                    selectElement.value = equipmentType;\r\n                                    // Подсветка выбранного поля\r\n                                    selectElement.style.borderColor = '#FF6B35';\r\n                                    setTimeout(() => {\r\n                                        selectElement.style.borderColor = '';\r\n                                    }, 2000);\r\n                                }\r\n                            }\r\n                        }, 300);\r\n                    }\r\n                }, 200);\r\n            });\r\n        });\r\n    }\r\n\r\n    initForms() {\r\n        // Форма обратного звонка\r\n        const callbackForm = document.getElementById('callbackForm');\r\n        if (callbackForm) {\r\n            callbackForm.addEventListener('submit', (e) => {\r\n                e.preventDefault();\r\n                const phone = callbackForm.querySelector('input[type=\"tel\"]').value;\r\n                \r\n                if (phone) {\r\n                    alert('Спасибо! Мы перезвоним вам в ближайшее время.');\r\n                    callbackForm.reset();\r\n                }\r\n            });\r\n        }\r\n\r\n        // Основная форма контактов\r\n        const contactForm = document.getElementById('contactForm');\r\n        if (contactForm) {\r\n            contactForm.addEventListener('submit', (e) => {\r\n                e.preventDefault();\r\n                alert('Спасибо за заявку! Мы свяжемся с вами в ближайшее время.');\r\n                contactForm.reset();\r\n            });\r\n        }\r\n    }\r\n\r\n    initHeader() {\r\n        const header = document.querySelector('.header');\r\n        if (!header) return;\r\n\r\n        let lastScrollY = window.scrollY;\r\n\r\n        window.addEventListener('scroll', () => {\r\n            const currentScrollY = window.scrollY;\r\n            \r\n            if (currentScrollY > 100) {\r\n                header.style.background = 'rgba(45, 52, 54, 0.98)';\r\n            } else {\r\n                header.style.background = 'rgba(45, 52, 54, 0.95)';\r\n            }\r\n\r\n            lastScrollY = currentScrollY;\r\n        });\r\n    }\r\n\r\n    initModal() {\r\n        // Кнопки для открытия модалов\r\n        const orderBtn = document.getElementById('orderBtn');\r\n        const calculateBtn = document.getElementById('calculateBtn');\r\n\r\n        if (orderBtn) {\r\n            orderBtn.addEventListener('click', () => {\r\n                const contactForm = document.getElementById('contactForm');\r\n                if (contactForm) {\r\n                    contactForm.scrollIntoView({ \r\n                        behavior: 'smooth',\r\n                        block: 'start'\r\n                    });\r\n                }\r\n            });\r\n        }\r\n\r\n        if (calculateBtn) {\r\n            calculateBtn.addEventListener('click', () => {\r\n                const contactForm = document.getElementById('contactForm');\r\n                if (contactForm) {\r\n                    contactForm.scrollIntoView({ \r\n                        behavior: 'smooth',\r\n                        block: 'start'\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n// Инициализация приложения\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    new SpezzApp();\r\n});"]}